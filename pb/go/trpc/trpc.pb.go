// Tencent is pleased to support the open source community by making tRPC available.
// Copyright (C) 2023 THL A29 Limited, a Tencent company. All rights reserved.
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.27.1
// source: trpc/trpc.proto

package trpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The magic value of trpc protocol
type TrpcMagic int32

const (
	// trpc does not use this value, it is used by the pb gen-code tool
	TrpcMagic_TRPC_DEFAULT_NONE TrpcMagic = 0
	// The magic value used by trpc protocol
	TrpcMagic_TRPC_MAGIC_VALUE TrpcMagic = 2352
)

// Enum value maps for TrpcMagic.
var (
	TrpcMagic_name = map[int32]string{
		0:    "TRPC_DEFAULT_NONE",
		2352: "TRPC_MAGIC_VALUE",
	}
	TrpcMagic_value = map[string]int32{
		"TRPC_DEFAULT_NONE": 0,
		"TRPC_MAGIC_VALUE":  2352,
	}
)

func (x TrpcMagic) Enum() *TrpcMagic {
	p := new(TrpcMagic)
	*p = x
	return p
}

func (x TrpcMagic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcMagic) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_trpc_proto_enumTypes[0].Descriptor()
}

func (TrpcMagic) Type() protoreflect.EnumType {
	return &file_trpc_trpc_proto_enumTypes[0]
}

func (x TrpcMagic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcMagic.Descriptor instead.
func (TrpcMagic) EnumDescriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{0}
}

// The data frame type of the trpc protocol packet
// Two types are currently supported:
// 1. The data frame type for unary(one-response-one-response)
// 2. The data frame type for stream
type TrpcDataFrameType int32

const (
	TrpcDataFrameType_TRPC_UNARY_FRAME  TrpcDataFrameType = 0
	TrpcDataFrameType_TRPC_STREAM_FRAME TrpcDataFrameType = 1
)

// Enum value maps for TrpcDataFrameType.
var (
	TrpcDataFrameType_name = map[int32]string{
		0: "TRPC_UNARY_FRAME",
		1: "TRPC_STREAM_FRAME",
	}
	TrpcDataFrameType_value = map[string]int32{
		"TRPC_UNARY_FRAME":  0,
		"TRPC_STREAM_FRAME": 1,
	}
)

func (x TrpcDataFrameType) Enum() *TrpcDataFrameType {
	p := new(TrpcDataFrameType)
	*p = x
	return p
}

func (x TrpcDataFrameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcDataFrameType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_trpc_proto_enumTypes[1].Descriptor()
}

func (TrpcDataFrameType) Type() protoreflect.EnumType {
	return &file_trpc_trpc_proto_enumTypes[1]
}

func (x TrpcDataFrameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcDataFrameType.Descriptor instead.
func (TrpcDataFrameType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{1}
}

// The specific frame type of trpc streaming data frame
// Four types are currently supported:
// `INIT` frame: FIXHEADER + TrpcStreamInitMeta
// `DATA` frame: FIXHEADER + body (business serialized data)
// `FEEDBACK` frame: FIXHEADER + TrpcStreamFeedBackMeta (triggered strategy: high/low water level and timer)
// `CLOSE` frame: FIXHEADER + TrpcStreamCloseMeta
type TrpcStreamFrameType int32

const (
	TrpcStreamFrameType_TRPC_UNARY                 TrpcStreamFrameType = 0
	TrpcStreamFrameType_TRPC_STREAM_FRAME_INIT     TrpcStreamFrameType = 1
	TrpcStreamFrameType_TRPC_STREAM_FRAME_DATA     TrpcStreamFrameType = 2
	TrpcStreamFrameType_TRPC_STREAM_FRAME_FEEDBACK TrpcStreamFrameType = 3
	TrpcStreamFrameType_TRPC_STREAM_FRAME_CLOSE    TrpcStreamFrameType = 4
)

// Enum value maps for TrpcStreamFrameType.
var (
	TrpcStreamFrameType_name = map[int32]string{
		0: "TRPC_UNARY",
		1: "TRPC_STREAM_FRAME_INIT",
		2: "TRPC_STREAM_FRAME_DATA",
		3: "TRPC_STREAM_FRAME_FEEDBACK",
		4: "TRPC_STREAM_FRAME_CLOSE",
	}
	TrpcStreamFrameType_value = map[string]int32{
		"TRPC_UNARY":                 0,
		"TRPC_STREAM_FRAME_INIT":     1,
		"TRPC_STREAM_FRAME_DATA":     2,
		"TRPC_STREAM_FRAME_FEEDBACK": 3,
		"TRPC_STREAM_FRAME_CLOSE":    4,
	}
)

func (x TrpcStreamFrameType) Enum() *TrpcStreamFrameType {
	p := new(TrpcStreamFrameType)
	*p = x
	return p
}

func (x TrpcStreamFrameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcStreamFrameType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_trpc_proto_enumTypes[2].Descriptor()
}

func (TrpcStreamFrameType) Type() protoreflect.EnumType {
	return &file_trpc_trpc_proto_enumTypes[2]
}

func (x TrpcStreamFrameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcStreamFrameType.Descriptor instead.
func (TrpcStreamFrameType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{2}
}

// The closed type of trpc stream protocol
type TrpcStreamCloseType int32

const (
	// normal closes unidirectional flow
	TrpcStreamCloseType_TRPC_STREAM_CLOSE TrpcStreamCloseType = 0
	// Exception closes bidirectional stream
	TrpcStreamCloseType_TRPC_STREAM_RESET TrpcStreamCloseType = 1
)

// Enum value maps for TrpcStreamCloseType.
var (
	TrpcStreamCloseType_name = map[int32]string{
		0: "TRPC_STREAM_CLOSE",
		1: "TRPC_STREAM_RESET",
	}
	TrpcStreamCloseType_value = map[string]int32{
		"TRPC_STREAM_CLOSE": 0,
		"TRPC_STREAM_RESET": 1,
	}
)

func (x TrpcStreamCloseType) Enum() *TrpcStreamCloseType {
	p := new(TrpcStreamCloseType)
	*p = x
	return p
}

func (x TrpcStreamCloseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcStreamCloseType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_trpc_proto_enumTypes[3].Descriptor()
}

func (TrpcStreamCloseType) Type() protoreflect.EnumType {
	return &file_trpc_trpc_proto_enumTypes[3]
}

func (x TrpcStreamCloseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcStreamCloseType.Descriptor instead.
func (TrpcStreamCloseType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{3}
}

// The version of trpc protocol
type TrpcProtoVersion int32

const (
	TrpcProtoVersion_TRPC_PROTO_V1 TrpcProtoVersion = 0
)

// Enum value maps for TrpcProtoVersion.
var (
	TrpcProtoVersion_name = map[int32]string{
		0: "TRPC_PROTO_V1",
	}
	TrpcProtoVersion_value = map[string]int32{
		"TRPC_PROTO_V1": 0,
	}
)

func (x TrpcProtoVersion) Enum() *TrpcProtoVersion {
	p := new(TrpcProtoVersion)
	*p = x
	return p
}

func (x TrpcProtoVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcProtoVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_trpc_proto_enumTypes[4].Descriptor()
}

func (TrpcProtoVersion) Type() protoreflect.EnumType {
	return &file_trpc_trpc_proto_enumTypes[4]
}

func (x TrpcProtoVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcProtoVersion.Descriptor instead.
func (TrpcProtoVersion) EnumDescriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{4}
}

// The call type of trpc protocol
type TrpcCallType int32

const (
	// Unary(one-response-one-response), include sync and async
	TrpcCallType_TRPC_UNARY_CALL TrpcCallType = 0
	// Oneway
	TrpcCallType_TRPC_ONEWAY_CALL TrpcCallType = 1
)

// Enum value maps for TrpcCallType.
var (
	TrpcCallType_name = map[int32]string{
		0: "TRPC_UNARY_CALL",
		1: "TRPC_ONEWAY_CALL",
	}
	TrpcCallType_value = map[string]int32{
		"TRPC_UNARY_CALL":  0,
		"TRPC_ONEWAY_CALL": 1,
	}
)

func (x TrpcCallType) Enum() *TrpcCallType {
	p := new(TrpcCallType)
	*p = x
	return p
}

func (x TrpcCallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcCallType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_trpc_proto_enumTypes[5].Descriptor()
}

func (TrpcCallType) Type() protoreflect.EnumType {
	return &file_trpc_trpc_proto_enumTypes[5]
}

func (x TrpcCallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcCallType.Descriptor instead.
func (TrpcCallType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{5}
}

// The message type of the transparent transmission information
type TrpcMessageType int32

const (
	// trpc does not use this value, it is used by the pb gen-code tool
	TrpcMessageType_TRPC_DEFAULT TrpcMessageType = 0
	// Dyeing message
	TrpcMessageType_TRPC_DYEING_MESSAGE TrpcMessageType = 1
	// Tracing message
	TrpcMessageType_TRPC_TRACE_MESSAGE TrpcMessageType = 2
	// Multi-Environment message
	TrpcMessageType_TRPC_MULTI_ENV_MESSAGE TrpcMessageType = 4
	// grid message
	TrpcMessageType_TRPC_GRID_MESSAGE TrpcMessageType = 8
	// SetNmae message
	TrpcMessageType_TRPC_SETNAME_MESSAGE TrpcMessageType = 16
)

// Enum value maps for TrpcMessageType.
var (
	TrpcMessageType_name = map[int32]string{
		0:  "TRPC_DEFAULT",
		1:  "TRPC_DYEING_MESSAGE",
		2:  "TRPC_TRACE_MESSAGE",
		4:  "TRPC_MULTI_ENV_MESSAGE",
		8:  "TRPC_GRID_MESSAGE",
		16: "TRPC_SETNAME_MESSAGE",
	}
	TrpcMessageType_value = map[string]int32{
		"TRPC_DEFAULT":           0,
		"TRPC_DYEING_MESSAGE":    1,
		"TRPC_TRACE_MESSAGE":     2,
		"TRPC_MULTI_ENV_MESSAGE": 4,
		"TRPC_GRID_MESSAGE":      8,
		"TRPC_SETNAME_MESSAGE":   16,
	}
)

func (x TrpcMessageType) Enum() *TrpcMessageType {
	p := new(TrpcMessageType)
	*p = x
	return p
}

func (x TrpcMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_trpc_proto_enumTypes[6].Descriptor()
}

func (TrpcMessageType) Type() protoreflect.EnumType {
	return &file_trpc_trpc_proto_enumTypes[6]
}

func (x TrpcMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcMessageType.Descriptor instead.
func (TrpcMessageType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{6}
}

// The encoding type of the body data in the trpc protocol
// Use proto by default
// At present, it is agreed that the value in the range of 0-127 is used by the framework
type TrpcContentEncodeType int32

const (
	// pb
	TrpcContentEncodeType_TRPC_PROTO_ENCODE TrpcContentEncodeType = 0
	// jce
	TrpcContentEncodeType_TRPC_JCE_ENCODE TrpcContentEncodeType = 1
	// json
	TrpcContentEncodeType_TRPC_JSON_ENCODE TrpcContentEncodeType = 2
	// flatbuffer
	TrpcContentEncodeType_TRPC_FLATBUFFER_ENCODE TrpcContentEncodeType = 3
	// text or binary
	TrpcContentEncodeType_TRPC_NOOP_ENCODE TrpcContentEncodeType = 4
	// xml
	TrpcContentEncodeType_TRPC_XML_ENCODE TrpcContentEncodeType = 5
	// thrift
	// Due to historical reasons, the early implementation of thrift used binary encoding
	// so the thrift here represents thrift-binary."
	TrpcContentEncodeType_TRPC_THRIFT_ENCODE TrpcContentEncodeType = 6
	// thrift-compact
	TrpcContentEncodeType_TRPC_THRIFT_COMPACT_ENCODE TrpcContentEncodeType = 7
	// text/xml
	TrpcContentEncodeType_TRPC_TEXT_XML_ENCODE TrpcContentEncodeType = 8
)

// Enum value maps for TrpcContentEncodeType.
var (
	TrpcContentEncodeType_name = map[int32]string{
		0: "TRPC_PROTO_ENCODE",
		1: "TRPC_JCE_ENCODE",
		2: "TRPC_JSON_ENCODE",
		3: "TRPC_FLATBUFFER_ENCODE",
		4: "TRPC_NOOP_ENCODE",
		5: "TRPC_XML_ENCODE",
		6: "TRPC_THRIFT_ENCODE",
		7: "TRPC_THRIFT_COMPACT_ENCODE",
		8: "TRPC_TEXT_XML_ENCODE",
	}
	TrpcContentEncodeType_value = map[string]int32{
		"TRPC_PROTO_ENCODE":          0,
		"TRPC_JCE_ENCODE":            1,
		"TRPC_JSON_ENCODE":           2,
		"TRPC_FLATBUFFER_ENCODE":     3,
		"TRPC_NOOP_ENCODE":           4,
		"TRPC_XML_ENCODE":            5,
		"TRPC_THRIFT_ENCODE":         6,
		"TRPC_THRIFT_COMPACT_ENCODE": 7,
		"TRPC_TEXT_XML_ENCODE":       8,
	}
)

func (x TrpcContentEncodeType) Enum() *TrpcContentEncodeType {
	p := new(TrpcContentEncodeType)
	*p = x
	return p
}

func (x TrpcContentEncodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcContentEncodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_trpc_proto_enumTypes[7].Descriptor()
}

func (TrpcContentEncodeType) Type() protoreflect.EnumType {
	return &file_trpc_trpc_proto_enumTypes[7]
}

func (x TrpcContentEncodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcContentEncodeType.Descriptor instead.
func (TrpcContentEncodeType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{7}
}

// The compressor type of the body data in the trpc protocol
// No compression by default
type TrpcCompressType int32

const (
	// No compression
	TrpcCompressType_TRPC_DEFAULT_COMPRESS TrpcCompressType = 0
	// gzip
	TrpcCompressType_TRPC_GZIP_COMPRESS TrpcCompressType = 1
	// snappy(Deprecated)
	// please use `TRPC_SNAPPY_STREAM_COMPRESS`/`TRPC_SNAPPY_BLOCK_COMPRESS`,
	// Because trpc-go and trpc-cpp use stream and block modes respectively,
	// the two are not compatible, and cross-language calls will make mistakes
	TrpcCompressType_TRPC_SNAPPY_COMPRESS TrpcCompressType = 2
	// zlib
	TrpcCompressType_TRPC_ZLIB_COMPRESS TrpcCompressType = 3
	// snappy stream
	TrpcCompressType_TRPC_SNAPPY_STREAM_COMPRESS TrpcCompressType = 4
	// snappy block
	TrpcCompressType_TRPC_SNAPPY_BLOCK_COMPRESS TrpcCompressType = 5
	// lz4 frame
	TrpcCompressType_TRPC_LZ4_FRAME_COMPRESS TrpcCompressType = 6
	// lz4 block
	TrpcCompressType_TRPC_LZ4_BLOCK_COMPRESS TrpcCompressType = 7
)

// Enum value maps for TrpcCompressType.
var (
	TrpcCompressType_name = map[int32]string{
		0: "TRPC_DEFAULT_COMPRESS",
		1: "TRPC_GZIP_COMPRESS",
		2: "TRPC_SNAPPY_COMPRESS",
		3: "TRPC_ZLIB_COMPRESS",
		4: "TRPC_SNAPPY_STREAM_COMPRESS",
		5: "TRPC_SNAPPY_BLOCK_COMPRESS",
		6: "TRPC_LZ4_FRAME_COMPRESS",
		7: "TRPC_LZ4_BLOCK_COMPRESS",
	}
	TrpcCompressType_value = map[string]int32{
		"TRPC_DEFAULT_COMPRESS":       0,
		"TRPC_GZIP_COMPRESS":          1,
		"TRPC_SNAPPY_COMPRESS":        2,
		"TRPC_ZLIB_COMPRESS":          3,
		"TRPC_SNAPPY_STREAM_COMPRESS": 4,
		"TRPC_SNAPPY_BLOCK_COMPRESS":  5,
		"TRPC_LZ4_FRAME_COMPRESS":     6,
		"TRPC_LZ4_BLOCK_COMPRESS":     7,
	}
)

func (x TrpcCompressType) Enum() *TrpcCompressType {
	p := new(TrpcCompressType)
	*p = x
	return p
}

func (x TrpcCompressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcCompressType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_trpc_proto_enumTypes[8].Descriptor()
}

func (TrpcCompressType) Type() protoreflect.EnumType {
	return &file_trpc_trpc_proto_enumTypes[8]
}

func (x TrpcCompressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcCompressType.Descriptor instead.
func (TrpcCompressType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{8}
}

// The return code definition of the framework layer interface call
type TrpcRetCode int32

const (
	// success
	TrpcRetCode_TRPC_INVOKE_SUCCESS TrpcRetCode = 0
	// server-side decode error
	TrpcRetCode_TRPC_SERVER_DECODE_ERR TrpcRetCode = 1
	// server-side encode error
	TrpcRetCode_TRPC_SERVER_ENCODE_ERR TrpcRetCode = 2
	// the server-side does not have a corresponding service implementation
	TrpcRetCode_TRPC_SERVER_NOSERVICE_ERR TrpcRetCode = 11
	// the server-side does not have a corresponding interface implementation
	TrpcRetCode_TRPC_SERVER_NOFUNC_ERR TrpcRetCode = 12
	// the request timed out on the server-side
	TrpcRetCode_TRPC_SERVER_TIMEOUT_ERR TrpcRetCode = 21
	// the request is overloaded on the server-side and the request is discarded
	TrpcRetCode_TRPC_SERVER_OVERLOAD_ERR TrpcRetCode = 22
	// the request is throttled on the server-side
	TrpcRetCode_TRPC_SERVER_LIMITED_ERR TrpcRetCode = 23
	// The request is timed out on the server-side due to the full link timeout
	TrpcRetCode_TRPC_SERVER_FULL_LINK_TIMEOUT_ERR TrpcRetCode = 24
	// server-side system error
	TrpcRetCode_TRPC_SERVER_SYSTEM_ERR TrpcRetCode = 31
	// the server-side request authentication failed error
	TrpcRetCode_TRPC_SERVER_AUTH_ERR TrpcRetCode = 41
	// the server-side request parameter automatic verification failed error
	TrpcRetCode_TRPC_SERVER_VALIDATE_ERR TrpcRetCode = 51
	// timeout error code
	// the request is timed out on the client-side
	TrpcRetCode_TRPC_CLIENT_INVOKE_TIMEOUT_ERR TrpcRetCode = 101
	// the request is timed out on the client-side due to the full link timeout
	TrpcRetCode_TRPC_CLIENT_FULL_LINK_TIMEOUT_ERR TrpcRetCode = 102
	// network or connection error code
	// client-side connection error
	TrpcRetCode_TRPC_CLIENT_CONNECT_ERR TrpcRetCode = 111
	// protocol error code
	// client-side encode error
	TrpcRetCode_TRPC_CLIENT_ENCODE_ERR TrpcRetCode = 121
	// client-side decode error
	TrpcRetCode_TRPC_CLIENT_DECODE_ERR TrpcRetCode = 122
	// client-side overload/limter error code
	// the request is throttled on the client-side
	TrpcRetCode_TRPC_CLIENT_LIMITED_ERR TrpcRetCode = 123
	// The request is overloaded on the client-side and discarded
	TrpcRetCode_TRPC_CLIENT_OVERLOAD_ERR TrpcRetCode = 124
	// service routing error code
	TrpcRetCode_TRPC_CLIENT_ROUTER_ERR TrpcRetCode = 131
	// client-side network or connection error code
	TrpcRetCode_TRPC_CLIENT_NETWORK_ERR TrpcRetCode = 141
	// client-side response parameter automatic verification failed error
	TrpcRetCode_TRPC_CLIENT_VALIDATE_ERR TrpcRetCode = 151
	// upstream actively disconnected, early cancellation request error code
	TrpcRetCode_TRPC_CLIENT_CANCELED_ERR TrpcRetCode = 161
	// client-side read data frame error
	TrpcRetCode_TRPC_CLIENT_READ_FRAME_ERR TrpcRetCode = 171
	// server-side streaming network or connection error code
	TrpcRetCode_TRPC_STREAM_SERVER_NETWORK_ERR TrpcRetCode = 201
	// server-side streaming error code
	// stream message exceeds size limit
	TrpcRetCode_TRPC_STREAM_SERVER_MSG_EXCEED_LIMIT_ERR TrpcRetCode = 211
	// server-side streaming encode error code
	TrpcRetCode_TRPC_STREAM_SERVER_ENCODE_ERR TrpcRetCode = 221
	// server-side streaming decode error code
	TrpcRetCode_TRPC_STREAM_SERVER_DECODE_ERR TrpcRetCode = 222
	// server-side stream write error code
	TrpcRetCode_TRPC_STREAM_SERVER_WRITE_END          TrpcRetCode = 231
	TrpcRetCode_TRPC_STREAM_SERVER_WRITE_OVERFLOW_ERR TrpcRetCode = 232
	TrpcRetCode_TRPC_STREAM_SERVER_WRITE_CLOSE_ERR    TrpcRetCode = 233
	TrpcRetCode_TRPC_STREAM_SERVER_WRITE_TIMEOUT_ERR  TrpcRetCode = 234
	// server-side stream read error code
	TrpcRetCode_TRPC_STREAM_SERVER_READ_END         TrpcRetCode = 251
	TrpcRetCode_TRPC_STREAM_SERVER_READ_CLOSE_ERR   TrpcRetCode = 252
	TrpcRetCode_TRPC_STREAM_SERVER_READ_EMPTY_ERR   TrpcRetCode = 253
	TrpcRetCode_TRPC_STREAM_SERVER_READ_TIMEOUT_ERR TrpcRetCode = 254
	// server-side streaming timeout error code
	TrpcRetCode_TRPC_STREAM_SERVER_IDLE_TIMEOUT_ERR TrpcRetCode = 255
	// client-side streaming network or connection error code
	TrpcRetCode_TRPC_STREAM_CLIENT_NETWORK_ERR TrpcRetCode = 301
	// client-side streaming error code
	// client-side stream message exceeds size limit
	TrpcRetCode_TRPC_STREAM_CLIENT_MSG_EXCEED_LIMIT_ERR TrpcRetCode = 311
	// client-side streaming encode error code
	TrpcRetCode_TRPC_STREAM_CLIENT_ENCODE_ERR TrpcRetCode = 321
	// client-side streaming decode error code
	TrpcRetCode_TRPC_STREAM_CLIENT_DECODE_ERR TrpcRetCode = 322
	// client-side stream write error code
	TrpcRetCode_TRPC_STREAM_CLIENT_WRITE_END          TrpcRetCode = 331
	TrpcRetCode_TRPC_STREAM_CLIENT_WRITE_OVERFLOW_ERR TrpcRetCode = 332
	TrpcRetCode_TRPC_STREAM_CLIENT_WRITE_CLOSE_ERR    TrpcRetCode = 333
	TrpcRetCode_TRPC_STREAM_CLIENT_WRITE_TIMEOUT_ERR  TrpcRetCode = 334
	// client-side stream read error code
	TrpcRetCode_TRPC_STREAM_CLIENT_READ_END         TrpcRetCode = 351
	TrpcRetCode_TRPC_STREAM_CLIENT_READ_CLOSE_ERR   TrpcRetCode = 352
	TrpcRetCode_TRPC_STREAM_CLIENT_READ_EMPTY_ERR   TrpcRetCode = 353
	TrpcRetCode_TRPC_STREAM_CLIENT_READ_TIMEOUT_ERR TrpcRetCode = 354
	// client streaming timeout error
	TrpcRetCode_TRPC_STREAM_CLIENT_IDLE_TIMEOUT_ERR TrpcRetCode = 355
	// unspecified error code(unary)
	TrpcRetCode_TRPC_INVOKE_UNKNOWN_ERR TrpcRetCode = 999
	// unspecified error code(stream)
	TrpcRetCode_TRPC_STREAM_UNKNOWN_ERR TrpcRetCode = 1000
)

// Enum value maps for TrpcRetCode.
var (
	TrpcRetCode_name = map[int32]string{
		0:    "TRPC_INVOKE_SUCCESS",
		1:    "TRPC_SERVER_DECODE_ERR",
		2:    "TRPC_SERVER_ENCODE_ERR",
		11:   "TRPC_SERVER_NOSERVICE_ERR",
		12:   "TRPC_SERVER_NOFUNC_ERR",
		21:   "TRPC_SERVER_TIMEOUT_ERR",
		22:   "TRPC_SERVER_OVERLOAD_ERR",
		23:   "TRPC_SERVER_LIMITED_ERR",
		24:   "TRPC_SERVER_FULL_LINK_TIMEOUT_ERR",
		31:   "TRPC_SERVER_SYSTEM_ERR",
		41:   "TRPC_SERVER_AUTH_ERR",
		51:   "TRPC_SERVER_VALIDATE_ERR",
		101:  "TRPC_CLIENT_INVOKE_TIMEOUT_ERR",
		102:  "TRPC_CLIENT_FULL_LINK_TIMEOUT_ERR",
		111:  "TRPC_CLIENT_CONNECT_ERR",
		121:  "TRPC_CLIENT_ENCODE_ERR",
		122:  "TRPC_CLIENT_DECODE_ERR",
		123:  "TRPC_CLIENT_LIMITED_ERR",
		124:  "TRPC_CLIENT_OVERLOAD_ERR",
		131:  "TRPC_CLIENT_ROUTER_ERR",
		141:  "TRPC_CLIENT_NETWORK_ERR",
		151:  "TRPC_CLIENT_VALIDATE_ERR",
		161:  "TRPC_CLIENT_CANCELED_ERR",
		171:  "TRPC_CLIENT_READ_FRAME_ERR",
		201:  "TRPC_STREAM_SERVER_NETWORK_ERR",
		211:  "TRPC_STREAM_SERVER_MSG_EXCEED_LIMIT_ERR",
		221:  "TRPC_STREAM_SERVER_ENCODE_ERR",
		222:  "TRPC_STREAM_SERVER_DECODE_ERR",
		231:  "TRPC_STREAM_SERVER_WRITE_END",
		232:  "TRPC_STREAM_SERVER_WRITE_OVERFLOW_ERR",
		233:  "TRPC_STREAM_SERVER_WRITE_CLOSE_ERR",
		234:  "TRPC_STREAM_SERVER_WRITE_TIMEOUT_ERR",
		251:  "TRPC_STREAM_SERVER_READ_END",
		252:  "TRPC_STREAM_SERVER_READ_CLOSE_ERR",
		253:  "TRPC_STREAM_SERVER_READ_EMPTY_ERR",
		254:  "TRPC_STREAM_SERVER_READ_TIMEOUT_ERR",
		255:  "TRPC_STREAM_SERVER_IDLE_TIMEOUT_ERR",
		301:  "TRPC_STREAM_CLIENT_NETWORK_ERR",
		311:  "TRPC_STREAM_CLIENT_MSG_EXCEED_LIMIT_ERR",
		321:  "TRPC_STREAM_CLIENT_ENCODE_ERR",
		322:  "TRPC_STREAM_CLIENT_DECODE_ERR",
		331:  "TRPC_STREAM_CLIENT_WRITE_END",
		332:  "TRPC_STREAM_CLIENT_WRITE_OVERFLOW_ERR",
		333:  "TRPC_STREAM_CLIENT_WRITE_CLOSE_ERR",
		334:  "TRPC_STREAM_CLIENT_WRITE_TIMEOUT_ERR",
		351:  "TRPC_STREAM_CLIENT_READ_END",
		352:  "TRPC_STREAM_CLIENT_READ_CLOSE_ERR",
		353:  "TRPC_STREAM_CLIENT_READ_EMPTY_ERR",
		354:  "TRPC_STREAM_CLIENT_READ_TIMEOUT_ERR",
		355:  "TRPC_STREAM_CLIENT_IDLE_TIMEOUT_ERR",
		999:  "TRPC_INVOKE_UNKNOWN_ERR",
		1000: "TRPC_STREAM_UNKNOWN_ERR",
	}
	TrpcRetCode_value = map[string]int32{
		"TRPC_INVOKE_SUCCESS":                     0,
		"TRPC_SERVER_DECODE_ERR":                  1,
		"TRPC_SERVER_ENCODE_ERR":                  2,
		"TRPC_SERVER_NOSERVICE_ERR":               11,
		"TRPC_SERVER_NOFUNC_ERR":                  12,
		"TRPC_SERVER_TIMEOUT_ERR":                 21,
		"TRPC_SERVER_OVERLOAD_ERR":                22,
		"TRPC_SERVER_LIMITED_ERR":                 23,
		"TRPC_SERVER_FULL_LINK_TIMEOUT_ERR":       24,
		"TRPC_SERVER_SYSTEM_ERR":                  31,
		"TRPC_SERVER_AUTH_ERR":                    41,
		"TRPC_SERVER_VALIDATE_ERR":                51,
		"TRPC_CLIENT_INVOKE_TIMEOUT_ERR":          101,
		"TRPC_CLIENT_FULL_LINK_TIMEOUT_ERR":       102,
		"TRPC_CLIENT_CONNECT_ERR":                 111,
		"TRPC_CLIENT_ENCODE_ERR":                  121,
		"TRPC_CLIENT_DECODE_ERR":                  122,
		"TRPC_CLIENT_LIMITED_ERR":                 123,
		"TRPC_CLIENT_OVERLOAD_ERR":                124,
		"TRPC_CLIENT_ROUTER_ERR":                  131,
		"TRPC_CLIENT_NETWORK_ERR":                 141,
		"TRPC_CLIENT_VALIDATE_ERR":                151,
		"TRPC_CLIENT_CANCELED_ERR":                161,
		"TRPC_CLIENT_READ_FRAME_ERR":              171,
		"TRPC_STREAM_SERVER_NETWORK_ERR":          201,
		"TRPC_STREAM_SERVER_MSG_EXCEED_LIMIT_ERR": 211,
		"TRPC_STREAM_SERVER_ENCODE_ERR":           221,
		"TRPC_STREAM_SERVER_DECODE_ERR":           222,
		"TRPC_STREAM_SERVER_WRITE_END":            231,
		"TRPC_STREAM_SERVER_WRITE_OVERFLOW_ERR":   232,
		"TRPC_STREAM_SERVER_WRITE_CLOSE_ERR":      233,
		"TRPC_STREAM_SERVER_WRITE_TIMEOUT_ERR":    234,
		"TRPC_STREAM_SERVER_READ_END":             251,
		"TRPC_STREAM_SERVER_READ_CLOSE_ERR":       252,
		"TRPC_STREAM_SERVER_READ_EMPTY_ERR":       253,
		"TRPC_STREAM_SERVER_READ_TIMEOUT_ERR":     254,
		"TRPC_STREAM_SERVER_IDLE_TIMEOUT_ERR":     255,
		"TRPC_STREAM_CLIENT_NETWORK_ERR":          301,
		"TRPC_STREAM_CLIENT_MSG_EXCEED_LIMIT_ERR": 311,
		"TRPC_STREAM_CLIENT_ENCODE_ERR":           321,
		"TRPC_STREAM_CLIENT_DECODE_ERR":           322,
		"TRPC_STREAM_CLIENT_WRITE_END":            331,
		"TRPC_STREAM_CLIENT_WRITE_OVERFLOW_ERR":   332,
		"TRPC_STREAM_CLIENT_WRITE_CLOSE_ERR":      333,
		"TRPC_STREAM_CLIENT_WRITE_TIMEOUT_ERR":    334,
		"TRPC_STREAM_CLIENT_READ_END":             351,
		"TRPC_STREAM_CLIENT_READ_CLOSE_ERR":       352,
		"TRPC_STREAM_CLIENT_READ_EMPTY_ERR":       353,
		"TRPC_STREAM_CLIENT_READ_TIMEOUT_ERR":     354,
		"TRPC_STREAM_CLIENT_IDLE_TIMEOUT_ERR":     355,
		"TRPC_INVOKE_UNKNOWN_ERR":                 999,
		"TRPC_STREAM_UNKNOWN_ERR":                 1000,
	}
)

func (x TrpcRetCode) Enum() *TrpcRetCode {
	p := new(TrpcRetCode)
	*p = x
	return p
}

func (x TrpcRetCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcRetCode) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_trpc_proto_enumTypes[9].Descriptor()
}

func (TrpcRetCode) Type() protoreflect.EnumType {
	return &file_trpc_trpc_proto_enumTypes[9]
}

func (x TrpcRetCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcRetCode.Descriptor instead.
func (TrpcRetCode) EnumDescriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{9}
}

// The message definition of stream `INIT` frame
type TrpcStreamInitMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// request meta information
	RequestMeta *TrpcStreamInitRequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3" json:"request_meta,omitempty"`
	// response meta information
	ResponseMeta *TrpcStreamInitResponseMeta `protobuf:"bytes,2,opt,name=response_meta,json=responseMeta,proto3" json:"response_meta,omitempty"`
	// The window size is notified by the receiver to the sender
	InitWindowSize uint32 `protobuf:"varint,3,opt,name=init_window_size,json=initWindowSize,proto3" json:"init_window_size,omitempty"`
	// The serialization type of the request data
	// eg: proto/json/.., default proto
	// The specific value corresponds to `TrpcContentEncodeType`
	ContentType uint32 `protobuf:"varint,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The compression type of the requested data
	// eg: gzip/snappy/..., not used by default
	// The specific value corresponds to `TrpcCompressType`
	ContentEncoding uint32 `protobuf:"varint,5,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TrpcStreamInitMeta) Reset() {
	*x = TrpcStreamInitMeta{}
	mi := &file_trpc_trpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrpcStreamInitMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrpcStreamInitMeta) ProtoMessage() {}

func (x *TrpcStreamInitMeta) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_trpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrpcStreamInitMeta.ProtoReflect.Descriptor instead.
func (*TrpcStreamInitMeta) Descriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{0}
}

func (x *TrpcStreamInitMeta) GetRequestMeta() *TrpcStreamInitRequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *TrpcStreamInitMeta) GetResponseMeta() *TrpcStreamInitResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *TrpcStreamInitMeta) GetInitWindowSize() uint32 {
	if x != nil {
		return x.InitWindowSize
	}
	return 0
}

func (x *TrpcStreamInitMeta) GetContentType() uint32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *TrpcStreamInitMeta) GetContentEncoding() uint32 {
	if x != nil {
		return x.ContentEncoding
	}
	return 0
}

// The request meta information definition of stream `INIT` frame
type TrpcStreamInitRequestMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Caller name
	// The specification format: trpc.application_name.server_name.proto_service_name, 4 segments
	Caller []byte `protobuf:"bytes,1,opt,name=caller,proto3" json:"caller,omitempty"`
	// Callee name
	// The specification format: trpc.application_name.server_name.proto_service_name[.interface_name]
	Callee []byte `protobuf:"bytes,2,opt,name=callee,proto3" json:"callee,omitempty"`
	// Interface name of callee
	// The specification format: /package.service_name/interface_name
	Func []byte `protobuf:"bytes,3,opt,name=func,proto3" json:"func,omitempty"`
	// The message type of the transparent transmission information
	// such as tracing, dyeing key, gray, authentication, multi-environment, set name, etc.
	// The specific value corresponds to `TrpcMessageType`
	MessageType uint32 `protobuf:"varint,4,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// The information key-value pair transparently transmitted by the framework
	// Currently divided into two parts:
	// 1 part is the information to be transparently transmitted by the framework layer,
	// and the name of the key must be started with `trpc-“
	// 2 part is the information to be transparently transmitted by the business layer,
	// and the business can set it by itself, it is recommended to start with `app-“, not `trpc-`
	// Note: The key-value pair in trans_info will be transparently transmitted through the whole link, please use it carefully for business.
	TransInfo     map[string][]byte `protobuf:"bytes,5,rep,name=trans_info,json=transInfo,proto3" json:"trans_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrpcStreamInitRequestMeta) Reset() {
	*x = TrpcStreamInitRequestMeta{}
	mi := &file_trpc_trpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrpcStreamInitRequestMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrpcStreamInitRequestMeta) ProtoMessage() {}

func (x *TrpcStreamInitRequestMeta) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_trpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrpcStreamInitRequestMeta.ProtoReflect.Descriptor instead.
func (*TrpcStreamInitRequestMeta) Descriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{1}
}

func (x *TrpcStreamInitRequestMeta) GetCaller() []byte {
	if x != nil {
		return x.Caller
	}
	return nil
}

func (x *TrpcStreamInitRequestMeta) GetCallee() []byte {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *TrpcStreamInitRequestMeta) GetFunc() []byte {
	if x != nil {
		return x.Func
	}
	return nil
}

func (x *TrpcStreamInitRequestMeta) GetMessageType() uint32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *TrpcStreamInitRequestMeta) GetTransInfo() map[string][]byte {
	if x != nil {
		return x.TransInfo
	}
	return nil
}

// The response meta information definition of stream `INIT` frame
type TrpcStreamInitResponseMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error code
	// The specific value corresponds to `TrpcRetCode`
	Ret int32 `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	// The result information when the call fails
	ErrorMsg      []byte `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrpcStreamInitResponseMeta) Reset() {
	*x = TrpcStreamInitResponseMeta{}
	mi := &file_trpc_trpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrpcStreamInitResponseMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrpcStreamInitResponseMeta) ProtoMessage() {}

func (x *TrpcStreamInitResponseMeta) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_trpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrpcStreamInitResponseMeta.ProtoReflect.Descriptor instead.
func (*TrpcStreamInitResponseMeta) Descriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{2}
}

func (x *TrpcStreamInitResponseMeta) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *TrpcStreamInitResponseMeta) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

// The meta information definition of stream `FEEDBACK` frame
type TrpcStreamFeedBackMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// increased window size
	WindowSizeIncrement uint32 `protobuf:"varint,1,opt,name=window_size_increment,json=windowSizeIncrement,proto3" json:"window_size_increment,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TrpcStreamFeedBackMeta) Reset() {
	*x = TrpcStreamFeedBackMeta{}
	mi := &file_trpc_trpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrpcStreamFeedBackMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrpcStreamFeedBackMeta) ProtoMessage() {}

func (x *TrpcStreamFeedBackMeta) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_trpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrpcStreamFeedBackMeta.ProtoReflect.Descriptor instead.
func (*TrpcStreamFeedBackMeta) Descriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{3}
}

func (x *TrpcStreamFeedBackMeta) GetWindowSizeIncrement() uint32 {
	if x != nil {
		return x.WindowSizeIncrement
	}
	return 0
}

// The meta information definition of trpc stream protocol for closing stream
type TrpcStreamCloseMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of stream closure, close one end, or close all
	CloseType int32 `protobuf:"varint,1,opt,name=close_type,json=closeType,proto3" json:"close_type,omitempty"`
	// Error code
	// The specific value corresponds to `TrpcRetCode`
	Ret int32 `protobuf:"varint,2,opt,name=ret,proto3" json:"ret,omitempty"`
	// The result information when the call fails
	Msg []byte `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	// The message type of the transparent transmission information
	// such as tracing, dyeing key, gray, authentication, multi-environment, set name, etc.
	// The specific value corresponds to `TrpcMessageType`
	MessageType uint32 `protobuf:"varint,4,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// The information key-value pair transparently transmitted by the framework
	// Currently divided into two parts:
	// 1 part is the information to be transparently transmitted by the framework layer,
	// and the name of the key must be started with `trpc-“
	// 2 part is the information to be transparently transmitted by the business layer,
	// and the business can set it by itself, it is recommended to start with `app-“, not `trpc-`
	// Note: The key-value pair in trans_info will be transparently transmitted through the whole link, please use it carefully for business.
	TransInfo map[string][]byte `protobuf:"bytes,5,rep,name=trans_info,json=transInfo,proto3" json:"trans_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The error code of the interface
	// 0 means success, other means failure
	FuncRet       int32 `protobuf:"varint,6,opt,name=func_ret,json=funcRet,proto3" json:"func_ret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrpcStreamCloseMeta) Reset() {
	*x = TrpcStreamCloseMeta{}
	mi := &file_trpc_trpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrpcStreamCloseMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrpcStreamCloseMeta) ProtoMessage() {}

func (x *TrpcStreamCloseMeta) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_trpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrpcStreamCloseMeta.ProtoReflect.Descriptor instead.
func (*TrpcStreamCloseMeta) Descriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{4}
}

func (x *TrpcStreamCloseMeta) GetCloseType() int32 {
	if x != nil {
		return x.CloseType
	}
	return 0
}

func (x *TrpcStreamCloseMeta) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *TrpcStreamCloseMeta) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *TrpcStreamCloseMeta) GetMessageType() uint32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *TrpcStreamCloseMeta) GetTransInfo() map[string][]byte {
	if x != nil {
		return x.TransInfo
	}
	return nil
}

func (x *TrpcStreamCloseMeta) GetFuncRet() int32 {
	if x != nil {
		return x.FuncRet
	}
	return 0
}

// The request header for unary
type RequestProtocol struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The version of protocol
	// The specific value corresponds to `TrpcProtoVersion`
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Call type
	// eg: unary, one-way
	// The specific value corresponds to `TrpcCallType`
	CallType uint32 `protobuf:"varint,2,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	// The unique id of the request(on the conneciton)
	RequestId uint32 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The timeout of the request(ms)
	Timeout uint32 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Caller name
	// The specification format: trpc.application_name.server_name.proto_service_name, 4 segments
	Caller []byte `protobuf:"bytes,5,opt,name=caller,proto3" json:"caller,omitempty"`
	// Callee name
	// The specification format: trpc.application_name.server_name.proto_service_name[.interface_name]
	Callee []byte `protobuf:"bytes,6,opt,name=callee,proto3" json:"callee,omitempty"`
	// Interface name of callee
	// The specification format: /package.service_name/interface_name
	Func []byte `protobuf:"bytes,7,opt,name=func,proto3" json:"func,omitempty"`
	// The message type of the transparent transmission information
	// such as tracing, dyeing key, gray, authentication, multi-environment, set name, etc.
	// The specific value corresponds to `TrpcMessageType`
	MessageType uint32 `protobuf:"varint,8,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// The information key-value pair transparently transmitted by the framework
	// Currently divided into two parts:
	// 1 part is the information to be transparently transmitted by the framework layer,
	// and the name of the key must be started with `trpc-“
	// 2 part is the information to be transparently transmitted by the business layer,
	// and the business can set it by itself, it is recommended to start with `app-“, not `trpc-`
	// Note: The key-value pair in trans_info will be transparently transmitted through the whole link, please use it carefully for business.
	TransInfo map[string][]byte `protobuf:"bytes,9,rep,name=trans_info,json=transInfo,proto3" json:"trans_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The serialization type of the request data
	// eg: proto/json/.., default proto
	// The specific value corresponds to `TrpcContentEncodeType`
	ContentType uint32 `protobuf:"varint,10,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The compression type of the requested data
	// eg: gzip/snappy/..., not used by default
	// The specific value corresponds to `TrpcCompressType`
	ContentEncoding uint32 `protobuf:"varint,11,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	// The size of attachment data
	AttachmentSize uint32 `protobuf:"varint,12,opt,name=attachment_size,json=attachmentSize,proto3" json:"attachment_size,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RequestProtocol) Reset() {
	*x = RequestProtocol{}
	mi := &file_trpc_trpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestProtocol) ProtoMessage() {}

func (x *RequestProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_trpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestProtocol.ProtoReflect.Descriptor instead.
func (*RequestProtocol) Descriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{5}
}

func (x *RequestProtocol) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RequestProtocol) GetCallType() uint32 {
	if x != nil {
		return x.CallType
	}
	return 0
}

func (x *RequestProtocol) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *RequestProtocol) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *RequestProtocol) GetCaller() []byte {
	if x != nil {
		return x.Caller
	}
	return nil
}

func (x *RequestProtocol) GetCallee() []byte {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *RequestProtocol) GetFunc() []byte {
	if x != nil {
		return x.Func
	}
	return nil
}

func (x *RequestProtocol) GetMessageType() uint32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *RequestProtocol) GetTransInfo() map[string][]byte {
	if x != nil {
		return x.TransInfo
	}
	return nil
}

func (x *RequestProtocol) GetContentType() uint32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *RequestProtocol) GetContentEncoding() uint32 {
	if x != nil {
		return x.ContentEncoding
	}
	return 0
}

func (x *RequestProtocol) GetAttachmentSize() uint32 {
	if x != nil {
		return x.AttachmentSize
	}
	return 0
}

// The response header for unary
type ResponseProtocol struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The version of protocol
	// The specific value corresponds to `TrpcProtoVersion`
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Call type
	// eg: unary, one-way
	// The specific value corresponds to `TrpcCallType`
	CallType uint32 `protobuf:"varint,2,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	// The unique id of the request(on the conneciton)
	RequestId uint32 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Error code
	// The specific value corresponds to `TrpcRetCode`
	Ret int32 `protobuf:"varint,4,opt,name=ret,proto3" json:"ret,omitempty"`
	// The error code of the interface
	// 0 means success, other means failure
	FuncRet int32 `protobuf:"varint,5,opt,name=func_ret,json=funcRet,proto3" json:"func_ret,omitempty"`
	// The result information when the call fails
	ErrorMsg []byte `protobuf:"bytes,6,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	// The message type of the transparent transmission information
	// such as tracing, dyeing key, gray, authentication, multi-environment, set name, etc.
	// The specific value corresponds to `TrpcMessageType`
	MessageType uint32 `protobuf:"varint,7,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// The information key-value pair transparently transmitted by the framework
	// Currently divided into two parts:
	// 1 part is the information to be transparently transmitted by the framework layer,
	// and the name of the key must be started with `trpc-“
	// 2 part is the information to be transparently transmitted by the business layer,
	// and the business can set it by itself, it is recommended to start with `app-“, not `trpc-`
	TransInfo map[string][]byte `protobuf:"bytes,8,rep,name=trans_info,json=transInfo,proto3" json:"trans_info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The serialization type of the request data
	// eg: proto/json/.., default proto
	// The specific value corresponds to `TrpcContentEncodeType`
	ContentType uint32 `protobuf:"varint,9,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The compression type of the requested data
	// eg: gzip/snappy/..., not used by default
	// The specific value corresponds to `TrpcCompressType`
	ContentEncoding uint32 `protobuf:"varint,10,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
	// The size of attachment data
	AttachmentSize uint32 `protobuf:"varint,12,opt,name=attachment_size,json=attachmentSize,proto3" json:"attachment_size,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ResponseProtocol) Reset() {
	*x = ResponseProtocol{}
	mi := &file_trpc_trpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseProtocol) ProtoMessage() {}

func (x *ResponseProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_trpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseProtocol.ProtoReflect.Descriptor instead.
func (*ResponseProtocol) Descriptor() ([]byte, []int) {
	return file_trpc_trpc_proto_rawDescGZIP(), []int{6}
}

func (x *ResponseProtocol) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ResponseProtocol) GetCallType() uint32 {
	if x != nil {
		return x.CallType
	}
	return 0
}

func (x *ResponseProtocol) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ResponseProtocol) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *ResponseProtocol) GetFuncRet() int32 {
	if x != nil {
		return x.FuncRet
	}
	return 0
}

func (x *ResponseProtocol) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *ResponseProtocol) GetMessageType() uint32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *ResponseProtocol) GetTransInfo() map[string][]byte {
	if x != nil {
		return x.TransInfo
	}
	return nil
}

func (x *ResponseProtocol) GetContentType() uint32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *ResponseProtocol) GetContentEncoding() uint32 {
	if x != nil {
		return x.ContentEncoding
	}
	return 0
}

func (x *ResponseProtocol) GetAttachmentSize() uint32 {
	if x != nil {
		return x.AttachmentSize
	}
	return 0
}

var File_trpc_trpc_proto protoreflect.FileDescriptor

const file_trpc_trpc_proto_rawDesc = "" +
	"\n" +
	"\x0ftrpc/trpc.proto\x12\x04trpc\"\x97\x02\n" +
	"\x12TrpcStreamInitMeta\x12B\n" +
	"\frequest_meta\x18\x01 \x01(\v2\x1f.trpc.TrpcStreamInitRequestMetaR\vrequestMeta\x12E\n" +
	"\rresponse_meta\x18\x02 \x01(\v2 .trpc.TrpcStreamInitResponseMetaR\fresponseMeta\x12(\n" +
	"\x10init_window_size\x18\x03 \x01(\rR\x0einitWindowSize\x12!\n" +
	"\fcontent_type\x18\x04 \x01(\rR\vcontentType\x12)\n" +
	"\x10content_encoding\x18\x05 \x01(\rR\x0fcontentEncoding\"\x8f\x02\n" +
	"\x19TrpcStreamInitRequestMeta\x12\x16\n" +
	"\x06caller\x18\x01 \x01(\fR\x06caller\x12\x16\n" +
	"\x06callee\x18\x02 \x01(\fR\x06callee\x12\x12\n" +
	"\x04func\x18\x03 \x01(\fR\x04func\x12!\n" +
	"\fmessage_type\x18\x04 \x01(\rR\vmessageType\x12M\n" +
	"\n" +
	"trans_info\x18\x05 \x03(\v2..trpc.TrpcStreamInitRequestMeta.TransInfoEntryR\ttransInfo\x1a<\n" +
	"\x0eTransInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"K\n" +
	"\x1aTrpcStreamInitResponseMeta\x12\x10\n" +
	"\x03ret\x18\x01 \x01(\x05R\x03ret\x12\x1b\n" +
	"\terror_msg\x18\x02 \x01(\fR\berrorMsg\"L\n" +
	"\x16TrpcStreamFeedBackMeta\x122\n" +
	"\x15window_size_increment\x18\x01 \x01(\rR\x13windowSizeIncrement\"\x9d\x02\n" +
	"\x13TrpcStreamCloseMeta\x12\x1d\n" +
	"\n" +
	"close_type\x18\x01 \x01(\x05R\tcloseType\x12\x10\n" +
	"\x03ret\x18\x02 \x01(\x05R\x03ret\x12\x10\n" +
	"\x03msg\x18\x03 \x01(\fR\x03msg\x12!\n" +
	"\fmessage_type\x18\x04 \x01(\rR\vmessageType\x12G\n" +
	"\n" +
	"trans_info\x18\x05 \x03(\v2(.trpc.TrpcStreamCloseMeta.TransInfoEntryR\ttransInfo\x12\x19\n" +
	"\bfunc_ret\x18\x06 \x01(\x05R\afuncRet\x1a<\n" +
	"\x0eTransInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"\xe2\x03\n" +
	"\x0fRequestProtocol\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12\x1b\n" +
	"\tcall_type\x18\x02 \x01(\rR\bcallType\x12\x1d\n" +
	"\n" +
	"request_id\x18\x03 \x01(\rR\trequestId\x12\x18\n" +
	"\atimeout\x18\x04 \x01(\rR\atimeout\x12\x16\n" +
	"\x06caller\x18\x05 \x01(\fR\x06caller\x12\x16\n" +
	"\x06callee\x18\x06 \x01(\fR\x06callee\x12\x12\n" +
	"\x04func\x18\a \x01(\fR\x04func\x12!\n" +
	"\fmessage_type\x18\b \x01(\rR\vmessageType\x12C\n" +
	"\n" +
	"trans_info\x18\t \x03(\v2$.trpc.RequestProtocol.TransInfoEntryR\ttransInfo\x12!\n" +
	"\fcontent_type\x18\n" +
	" \x01(\rR\vcontentType\x12)\n" +
	"\x10content_encoding\x18\v \x01(\rR\x0fcontentEncoding\x12'\n" +
	"\x0fattachment_size\x18\f \x01(\rR\x0eattachmentSize\x1a<\n" +
	"\x0eTransInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"\xd0\x03\n" +
	"\x10ResponseProtocol\x12\x18\n" +
	"\aversion\x18\x01 \x01(\rR\aversion\x12\x1b\n" +
	"\tcall_type\x18\x02 \x01(\rR\bcallType\x12\x1d\n" +
	"\n" +
	"request_id\x18\x03 \x01(\rR\trequestId\x12\x10\n" +
	"\x03ret\x18\x04 \x01(\x05R\x03ret\x12\x19\n" +
	"\bfunc_ret\x18\x05 \x01(\x05R\afuncRet\x12\x1b\n" +
	"\terror_msg\x18\x06 \x01(\fR\berrorMsg\x12!\n" +
	"\fmessage_type\x18\a \x01(\rR\vmessageType\x12D\n" +
	"\n" +
	"trans_info\x18\b \x03(\v2%.trpc.ResponseProtocol.TransInfoEntryR\ttransInfo\x12!\n" +
	"\fcontent_type\x18\t \x01(\rR\vcontentType\x12)\n" +
	"\x10content_encoding\x18\n" +
	" \x01(\rR\x0fcontentEncoding\x12'\n" +
	"\x0fattachment_size\x18\f \x01(\rR\x0eattachmentSize\x1a<\n" +
	"\x0eTransInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01*9\n" +
	"\tTrpcMagic\x12\x15\n" +
	"\x11TRPC_DEFAULT_NONE\x10\x00\x12\x15\n" +
	"\x10TRPC_MAGIC_VALUE\x10\xb0\x12*@\n" +
	"\x11TrpcDataFrameType\x12\x14\n" +
	"\x10TRPC_UNARY_FRAME\x10\x00\x12\x15\n" +
	"\x11TRPC_STREAM_FRAME\x10\x01*\x9a\x01\n" +
	"\x13TrpcStreamFrameType\x12\x0e\n" +
	"\n" +
	"TRPC_UNARY\x10\x00\x12\x1a\n" +
	"\x16TRPC_STREAM_FRAME_INIT\x10\x01\x12\x1a\n" +
	"\x16TRPC_STREAM_FRAME_DATA\x10\x02\x12\x1e\n" +
	"\x1aTRPC_STREAM_FRAME_FEEDBACK\x10\x03\x12\x1b\n" +
	"\x17TRPC_STREAM_FRAME_CLOSE\x10\x04*C\n" +
	"\x13TrpcStreamCloseType\x12\x15\n" +
	"\x11TRPC_STREAM_CLOSE\x10\x00\x12\x15\n" +
	"\x11TRPC_STREAM_RESET\x10\x01*%\n" +
	"\x10TrpcProtoVersion\x12\x11\n" +
	"\rTRPC_PROTO_V1\x10\x00*9\n" +
	"\fTrpcCallType\x12\x13\n" +
	"\x0fTRPC_UNARY_CALL\x10\x00\x12\x14\n" +
	"\x10TRPC_ONEWAY_CALL\x10\x01*\xa1\x01\n" +
	"\x0fTrpcMessageType\x12\x10\n" +
	"\fTRPC_DEFAULT\x10\x00\x12\x17\n" +
	"\x13TRPC_DYEING_MESSAGE\x10\x01\x12\x16\n" +
	"\x12TRPC_TRACE_MESSAGE\x10\x02\x12\x1a\n" +
	"\x16TRPC_MULTI_ENV_MESSAGE\x10\x04\x12\x15\n" +
	"\x11TRPC_GRID_MESSAGE\x10\b\x12\x18\n" +
	"\x14TRPC_SETNAME_MESSAGE\x10\x10*\xf2\x01\n" +
	"\x15TrpcContentEncodeType\x12\x15\n" +
	"\x11TRPC_PROTO_ENCODE\x10\x00\x12\x13\n" +
	"\x0fTRPC_JCE_ENCODE\x10\x01\x12\x14\n" +
	"\x10TRPC_JSON_ENCODE\x10\x02\x12\x1a\n" +
	"\x16TRPC_FLATBUFFER_ENCODE\x10\x03\x12\x14\n" +
	"\x10TRPC_NOOP_ENCODE\x10\x04\x12\x13\n" +
	"\x0fTRPC_XML_ENCODE\x10\x05\x12\x16\n" +
	"\x12TRPC_THRIFT_ENCODE\x10\x06\x12\x1e\n" +
	"\x1aTRPC_THRIFT_COMPACT_ENCODE\x10\a\x12\x18\n" +
	"\x14TRPC_TEXT_XML_ENCODE\x10\b*\xf2\x01\n" +
	"\x10TrpcCompressType\x12\x19\n" +
	"\x15TRPC_DEFAULT_COMPRESS\x10\x00\x12\x16\n" +
	"\x12TRPC_GZIP_COMPRESS\x10\x01\x12\x18\n" +
	"\x14TRPC_SNAPPY_COMPRESS\x10\x02\x12\x16\n" +
	"\x12TRPC_ZLIB_COMPRESS\x10\x03\x12\x1f\n" +
	"\x1bTRPC_SNAPPY_STREAM_COMPRESS\x10\x04\x12\x1e\n" +
	"\x1aTRPC_SNAPPY_BLOCK_COMPRESS\x10\x05\x12\x1b\n" +
	"\x17TRPC_LZ4_FRAME_COMPRESS\x10\x06\x12\x1b\n" +
	"\x17TRPC_LZ4_BLOCK_COMPRESS\x10\a*\xa5\x0e\n" +
	"\vTrpcRetCode\x12\x17\n" +
	"\x13TRPC_INVOKE_SUCCESS\x10\x00\x12\x1a\n" +
	"\x16TRPC_SERVER_DECODE_ERR\x10\x01\x12\x1a\n" +
	"\x16TRPC_SERVER_ENCODE_ERR\x10\x02\x12\x1d\n" +
	"\x19TRPC_SERVER_NOSERVICE_ERR\x10\v\x12\x1a\n" +
	"\x16TRPC_SERVER_NOFUNC_ERR\x10\f\x12\x1b\n" +
	"\x17TRPC_SERVER_TIMEOUT_ERR\x10\x15\x12\x1c\n" +
	"\x18TRPC_SERVER_OVERLOAD_ERR\x10\x16\x12\x1b\n" +
	"\x17TRPC_SERVER_LIMITED_ERR\x10\x17\x12%\n" +
	"!TRPC_SERVER_FULL_LINK_TIMEOUT_ERR\x10\x18\x12\x1a\n" +
	"\x16TRPC_SERVER_SYSTEM_ERR\x10\x1f\x12\x18\n" +
	"\x14TRPC_SERVER_AUTH_ERR\x10)\x12\x1c\n" +
	"\x18TRPC_SERVER_VALIDATE_ERR\x103\x12\"\n" +
	"\x1eTRPC_CLIENT_INVOKE_TIMEOUT_ERR\x10e\x12%\n" +
	"!TRPC_CLIENT_FULL_LINK_TIMEOUT_ERR\x10f\x12\x1b\n" +
	"\x17TRPC_CLIENT_CONNECT_ERR\x10o\x12\x1a\n" +
	"\x16TRPC_CLIENT_ENCODE_ERR\x10y\x12\x1a\n" +
	"\x16TRPC_CLIENT_DECODE_ERR\x10z\x12\x1b\n" +
	"\x17TRPC_CLIENT_LIMITED_ERR\x10{\x12\x1c\n" +
	"\x18TRPC_CLIENT_OVERLOAD_ERR\x10|\x12\x1b\n" +
	"\x16TRPC_CLIENT_ROUTER_ERR\x10\x83\x01\x12\x1c\n" +
	"\x17TRPC_CLIENT_NETWORK_ERR\x10\x8d\x01\x12\x1d\n" +
	"\x18TRPC_CLIENT_VALIDATE_ERR\x10\x97\x01\x12\x1d\n" +
	"\x18TRPC_CLIENT_CANCELED_ERR\x10\xa1\x01\x12\x1f\n" +
	"\x1aTRPC_CLIENT_READ_FRAME_ERR\x10\xab\x01\x12#\n" +
	"\x1eTRPC_STREAM_SERVER_NETWORK_ERR\x10\xc9\x01\x12,\n" +
	"'TRPC_STREAM_SERVER_MSG_EXCEED_LIMIT_ERR\x10\xd3\x01\x12\"\n" +
	"\x1dTRPC_STREAM_SERVER_ENCODE_ERR\x10\xdd\x01\x12\"\n" +
	"\x1dTRPC_STREAM_SERVER_DECODE_ERR\x10\xde\x01\x12!\n" +
	"\x1cTRPC_STREAM_SERVER_WRITE_END\x10\xe7\x01\x12*\n" +
	"%TRPC_STREAM_SERVER_WRITE_OVERFLOW_ERR\x10\xe8\x01\x12'\n" +
	"\"TRPC_STREAM_SERVER_WRITE_CLOSE_ERR\x10\xe9\x01\x12)\n" +
	"$TRPC_STREAM_SERVER_WRITE_TIMEOUT_ERR\x10\xea\x01\x12 \n" +
	"\x1bTRPC_STREAM_SERVER_READ_END\x10\xfb\x01\x12&\n" +
	"!TRPC_STREAM_SERVER_READ_CLOSE_ERR\x10\xfc\x01\x12&\n" +
	"!TRPC_STREAM_SERVER_READ_EMPTY_ERR\x10\xfd\x01\x12(\n" +
	"#TRPC_STREAM_SERVER_READ_TIMEOUT_ERR\x10\xfe\x01\x12(\n" +
	"#TRPC_STREAM_SERVER_IDLE_TIMEOUT_ERR\x10\xff\x01\x12#\n" +
	"\x1eTRPC_STREAM_CLIENT_NETWORK_ERR\x10\xad\x02\x12,\n" +
	"'TRPC_STREAM_CLIENT_MSG_EXCEED_LIMIT_ERR\x10\xb7\x02\x12\"\n" +
	"\x1dTRPC_STREAM_CLIENT_ENCODE_ERR\x10\xc1\x02\x12\"\n" +
	"\x1dTRPC_STREAM_CLIENT_DECODE_ERR\x10\xc2\x02\x12!\n" +
	"\x1cTRPC_STREAM_CLIENT_WRITE_END\x10\xcb\x02\x12*\n" +
	"%TRPC_STREAM_CLIENT_WRITE_OVERFLOW_ERR\x10\xcc\x02\x12'\n" +
	"\"TRPC_STREAM_CLIENT_WRITE_CLOSE_ERR\x10\xcd\x02\x12)\n" +
	"$TRPC_STREAM_CLIENT_WRITE_TIMEOUT_ERR\x10\xce\x02\x12 \n" +
	"\x1bTRPC_STREAM_CLIENT_READ_END\x10\xdf\x02\x12&\n" +
	"!TRPC_STREAM_CLIENT_READ_CLOSE_ERR\x10\xe0\x02\x12&\n" +
	"!TRPC_STREAM_CLIENT_READ_EMPTY_ERR\x10\xe1\x02\x12(\n" +
	"#TRPC_STREAM_CLIENT_READ_TIMEOUT_ERR\x10\xe2\x02\x12(\n" +
	"#TRPC_STREAM_CLIENT_IDLE_TIMEOUT_ERR\x10\xe3\x02\x12\x1c\n" +
	"\x17TRPC_INVOKE_UNKNOWN_ERR\x10\xe7\a\x12\x1c\n" +
	"\x17TRPC_STREAM_UNKNOWN_ERR\x10\xe8\aB`\n" +
	"&com.tencent.trpc.proto.standard.commonB\fTRPCProtocolZ(trpc.group/trpc/trpc-protocol/pb/go/trpcb\x06proto3"

var (
	file_trpc_trpc_proto_rawDescOnce sync.Once
	file_trpc_trpc_proto_rawDescData []byte
)

func file_trpc_trpc_proto_rawDescGZIP() []byte {
	file_trpc_trpc_proto_rawDescOnce.Do(func() {
		file_trpc_trpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_trpc_trpc_proto_rawDesc), len(file_trpc_trpc_proto_rawDesc)))
	})
	return file_trpc_trpc_proto_rawDescData
}

var file_trpc_trpc_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_trpc_trpc_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_trpc_trpc_proto_goTypes = []any{
	(TrpcMagic)(0),                     // 0: trpc.TrpcMagic
	(TrpcDataFrameType)(0),             // 1: trpc.TrpcDataFrameType
	(TrpcStreamFrameType)(0),           // 2: trpc.TrpcStreamFrameType
	(TrpcStreamCloseType)(0),           // 3: trpc.TrpcStreamCloseType
	(TrpcProtoVersion)(0),              // 4: trpc.TrpcProtoVersion
	(TrpcCallType)(0),                  // 5: trpc.TrpcCallType
	(TrpcMessageType)(0),               // 6: trpc.TrpcMessageType
	(TrpcContentEncodeType)(0),         // 7: trpc.TrpcContentEncodeType
	(TrpcCompressType)(0),              // 8: trpc.TrpcCompressType
	(TrpcRetCode)(0),                   // 9: trpc.TrpcRetCode
	(*TrpcStreamInitMeta)(nil),         // 10: trpc.TrpcStreamInitMeta
	(*TrpcStreamInitRequestMeta)(nil),  // 11: trpc.TrpcStreamInitRequestMeta
	(*TrpcStreamInitResponseMeta)(nil), // 12: trpc.TrpcStreamInitResponseMeta
	(*TrpcStreamFeedBackMeta)(nil),     // 13: trpc.TrpcStreamFeedBackMeta
	(*TrpcStreamCloseMeta)(nil),        // 14: trpc.TrpcStreamCloseMeta
	(*RequestProtocol)(nil),            // 15: trpc.RequestProtocol
	(*ResponseProtocol)(nil),           // 16: trpc.ResponseProtocol
	nil,                                // 17: trpc.TrpcStreamInitRequestMeta.TransInfoEntry
	nil,                                // 18: trpc.TrpcStreamCloseMeta.TransInfoEntry
	nil,                                // 19: trpc.RequestProtocol.TransInfoEntry
	nil,                                // 20: trpc.ResponseProtocol.TransInfoEntry
}
var file_trpc_trpc_proto_depIdxs = []int32{
	11, // 0: trpc.TrpcStreamInitMeta.request_meta:type_name -> trpc.TrpcStreamInitRequestMeta
	12, // 1: trpc.TrpcStreamInitMeta.response_meta:type_name -> trpc.TrpcStreamInitResponseMeta
	17, // 2: trpc.TrpcStreamInitRequestMeta.trans_info:type_name -> trpc.TrpcStreamInitRequestMeta.TransInfoEntry
	18, // 3: trpc.TrpcStreamCloseMeta.trans_info:type_name -> trpc.TrpcStreamCloseMeta.TransInfoEntry
	19, // 4: trpc.RequestProtocol.trans_info:type_name -> trpc.RequestProtocol.TransInfoEntry
	20, // 5: trpc.ResponseProtocol.trans_info:type_name -> trpc.ResponseProtocol.TransInfoEntry
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_trpc_trpc_proto_init() }
func file_trpc_trpc_proto_init() {
	if File_trpc_trpc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_trpc_trpc_proto_rawDesc), len(file_trpc_trpc_proto_rawDesc)),
			NumEnums:      10,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trpc_trpc_proto_goTypes,
		DependencyIndexes: file_trpc_trpc_proto_depIdxs,
		EnumInfos:         file_trpc_trpc_proto_enumTypes,
		MessageInfos:      file_trpc_trpc_proto_msgTypes,
	}.Build()
	File_trpc_trpc_proto = out.File
	file_trpc_trpc_proto_goTypes = nil
	file_trpc_trpc_proto_depIdxs = nil
}
