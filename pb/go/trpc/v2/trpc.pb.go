// Tencent is pleased to support the open source community by making tRPC available.
// Copyright (C) 2023 THL A29 Limited, a Tencent company. All rights reserved.
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.1
// source: trpc/v2/trpc.proto

package trpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The magic value in the framework protocol header
type TrpcMagic int32

const (
	// trpc does not use this value, it is used by the pb tool to generate code
	TrpcMagic_TRPC_DEFAULT_NONE TrpcMagic = 0
	// trpc protocol uses this magic value by default
	TrpcMagic_TRPC_MAGIC_VALUE TrpcMagic = 2352
)

// Enum value maps for TrpcMagic.
var (
	TrpcMagic_name = map[int32]string{
		0:    "TRPC_DEFAULT_NONE",
		2352: "TRPC_MAGIC_VALUE",
	}
	TrpcMagic_value = map[string]int32{
		"TRPC_DEFAULT_NONE": 0,
		"TRPC_MAGIC_VALUE":  2352,
	}
)

func (x TrpcMagic) Enum() *TrpcMagic {
	p := new(TrpcMagic)
	*p = x
	return p
}

func (x TrpcMagic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcMagic) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_v2_trpc_proto_enumTypes[0].Descriptor()
}

func (TrpcMagic) Type() protoreflect.EnumType {
	return &file_trpc_v2_trpc_proto_enumTypes[0]
}

func (x TrpcMagic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcMagic.Descriptor instead.
func (TrpcMagic) EnumDescriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{0}
}

// The binary data frame type of the trpc protocol
// Currently supports two types of binary data frames:
// 1. Binary data frame type for request-response mode
// 2. Binary data frame type for streaming mode
type TrpcDataFrameType int32

const (
	// Binary data frame type for trpc request-response mode
	TrpcDataFrameType_TRPC_UNARY_FRAME TrpcDataFrameType = 0
	// Binary data frame type for trpc streaming mode
	TrpcDataFrameType_TRPC_STREAM_FRAME TrpcDataFrameType = 1
)

// Enum value maps for TrpcDataFrameType.
var (
	TrpcDataFrameType_name = map[int32]string{
		0: "TRPC_UNARY_FRAME",
		1: "TRPC_STREAM_FRAME",
	}
	TrpcDataFrameType_value = map[string]int32{
		"TRPC_UNARY_FRAME":  0,
		"TRPC_STREAM_FRAME": 1,
	}
)

func (x TrpcDataFrameType) Enum() *TrpcDataFrameType {
	p := new(TrpcDataFrameType)
	*p = x
	return p
}

func (x TrpcDataFrameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcDataFrameType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_v2_trpc_proto_enumTypes[1].Descriptor()
}

func (TrpcDataFrameType) Type() protoreflect.EnumType {
	return &file_trpc_v2_trpc_proto_enumTypes[1]
}

func (x TrpcDataFrameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcDataFrameType.Descriptor instead.
func (TrpcDataFrameType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{1}
}

// The binary data frame type of trpc protocol streaming
// Currently there are 4 types of streaming frames: INIT/DATA/FEEDBACK/CLOSE, where CLOSE frame does not carry business data
// INIT frame: FIXHEADER + TrpcStreamInitMeta
// DATA frame: FIXHEADER + body(business serialized data)
// FEEDBACK frame: FIXHEADER + TrpcStreamFeedBackMeta (trigger strategy: high/low water level + timer)
// CLOSE frame: FIXHEADER + TrpcStreamCloseMeta
// Connection and stream idle timeout recycling mechanism is not considered
type TrpcStreamFrameType int32

const (
	// Default value for request-response
	TrpcStreamFrameType_TRPC_UNARY TrpcStreamFrameType = 0
	// Streaming INIT frame type
	TrpcStreamFrameType_TRPC_STREAM_FRAME_INIT TrpcStreamFrameType = 1
	// Streaming DATA frame type
	TrpcStreamFrameType_TRPC_STREAM_FRAME_DATA TrpcStreamFrameType = 2
	// Streaming FEEDBACK frame type
	TrpcStreamFrameType_TRPC_STREAM_FRAME_FEEDBACK TrpcStreamFrameType = 3
	// Streaming CLOSE frame type
	TrpcStreamFrameType_TRPC_STREAM_FRAME_CLOSE TrpcStreamFrameType = 4
)

// Enum value maps for TrpcStreamFrameType.
var (
	TrpcStreamFrameType_name = map[int32]string{
		0: "TRPC_UNARY",
		1: "TRPC_STREAM_FRAME_INIT",
		2: "TRPC_STREAM_FRAME_DATA",
		3: "TRPC_STREAM_FRAME_FEEDBACK",
		4: "TRPC_STREAM_FRAME_CLOSE",
	}
	TrpcStreamFrameType_value = map[string]int32{
		"TRPC_UNARY":                 0,
		"TRPC_STREAM_FRAME_INIT":     1,
		"TRPC_STREAM_FRAME_DATA":     2,
		"TRPC_STREAM_FRAME_FEEDBACK": 3,
		"TRPC_STREAM_FRAME_CLOSE":    4,
	}
)

func (x TrpcStreamFrameType) Enum() *TrpcStreamFrameType {
	p := new(TrpcStreamFrameType)
	*p = x
	return p
}

func (x TrpcStreamFrameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcStreamFrameType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_v2_trpc_proto_enumTypes[2].Descriptor()
}

func (TrpcStreamFrameType) Type() protoreflect.EnumType {
	return &file_trpc_v2_trpc_proto_enumTypes[2]
}

func (x TrpcStreamFrameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcStreamFrameType.Descriptor instead.
func (TrpcStreamFrameType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{2}
}

// trpc streaming close type
type TrpcStreamCloseType int32

const (
	// Normal unidirectional stream close
	TrpcStreamCloseType_TRPC_STREAM_CLOSE TrpcStreamCloseType = 0
	// Abnormal bidirectional stream close
	TrpcStreamCloseType_TRPC_STREAM_RESET TrpcStreamCloseType = 1
)

// Enum value maps for TrpcStreamCloseType.
var (
	TrpcStreamCloseType_name = map[int32]string{
		0: "TRPC_STREAM_CLOSE",
		1: "TRPC_STREAM_RESET",
	}
	TrpcStreamCloseType_value = map[string]int32{
		"TRPC_STREAM_CLOSE": 0,
		"TRPC_STREAM_RESET": 1,
	}
)

func (x TrpcStreamCloseType) Enum() *TrpcStreamCloseType {
	p := new(TrpcStreamCloseType)
	*p = x
	return p
}

func (x TrpcStreamCloseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcStreamCloseType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_v2_trpc_proto_enumTypes[3].Descriptor()
}

func (TrpcStreamCloseType) Type() protoreflect.EnumType {
	return &file_trpc_v2_trpc_proto_enumTypes[3]
}

func (x TrpcStreamCloseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcStreamCloseType.Descriptor instead.
func (TrpcStreamCloseType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{3}
}

// trpc protocol version
type TrpcProtoVersion int32

const (
	// Default version
	TrpcProtoVersion_TRPC_PROTO_V1 TrpcProtoVersion = 0
)

// Enum value maps for TrpcProtoVersion.
var (
	TrpcProtoVersion_name = map[int32]string{
		0: "TRPC_PROTO_V1",
	}
	TrpcProtoVersion_value = map[string]int32{
		"TRPC_PROTO_V1": 0,
	}
)

func (x TrpcProtoVersion) Enum() *TrpcProtoVersion {
	p := new(TrpcProtoVersion)
	*p = x
	return p
}

func (x TrpcProtoVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcProtoVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_v2_trpc_proto_enumTypes[4].Descriptor()
}

func (TrpcProtoVersion) Type() protoreflect.EnumType {
	return &file_trpc_v2_trpc_proto_enumTypes[4]
}

func (x TrpcProtoVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcProtoVersion.Descriptor instead.
func (TrpcProtoVersion) EnumDescriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{4}
}

// Call type in trpc protocol
type TrpcCallType int32

const (
	// Request-response call, including synchronous and asynchronous
	TrpcCallType_TRPC_UNARY_CALL TrpcCallType = 0
	// One-way call
	TrpcCallType_TRPC_ONEWAY_CALL TrpcCallType = 1
)

// Enum value maps for TrpcCallType.
var (
	TrpcCallType_name = map[int32]string{
		0: "TRPC_UNARY_CALL",
		1: "TRPC_ONEWAY_CALL",
	}
	TrpcCallType_value = map[string]int32{
		"TRPC_UNARY_CALL":  0,
		"TRPC_ONEWAY_CALL": 1,
	}
)

func (x TrpcCallType) Enum() *TrpcCallType {
	p := new(TrpcCallType)
	*p = x
	return p
}

func (x TrpcCallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcCallType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_v2_trpc_proto_enumTypes[5].Descriptor()
}

func (TrpcCallType) Type() protoreflect.EnumType {
	return &file_trpc_v2_trpc_proto_enumTypes[5]
}

func (x TrpcCallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcCallType.Descriptor instead.
func (TrpcCallType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{5}
}

// Message transparent transmission supported types in trpc protocol
type TrpcMessageType int32

const (
	// trpc does not use this value, it is used by the pb tool to generate code
	TrpcMessageType_TRPC_DEFAULT TrpcMessageType = 0
	// Dyeing
	TrpcMessageType_TRPC_DYEING_MESSAGE TrpcMessageType = 1
	// Tracing
	TrpcMessageType_TRPC_TRACE_MESSAGE TrpcMessageType = 2
	// Multi-environment
	TrpcMessageType_TRPC_MULTI_ENV_MESSAGE TrpcMessageType = 4
	// Gray
	TrpcMessageType_TRPC_GRID_MESSAGE TrpcMessageType = 8
	// Set name
	TrpcMessageType_TRPC_SETNAME_MESSAGE TrpcMessageType = 16
)

// Enum value maps for TrpcMessageType.
var (
	TrpcMessageType_name = map[int32]string{
		0:  "TRPC_DEFAULT",
		1:  "TRPC_DYEING_MESSAGE",
		2:  "TRPC_TRACE_MESSAGE",
		4:  "TRPC_MULTI_ENV_MESSAGE",
		8:  "TRPC_GRID_MESSAGE",
		16: "TRPC_SETNAME_MESSAGE",
	}
	TrpcMessageType_value = map[string]int32{
		"TRPC_DEFAULT":           0,
		"TRPC_DYEING_MESSAGE":    1,
		"TRPC_TRACE_MESSAGE":     2,
		"TRPC_MULTI_ENV_MESSAGE": 4,
		"TRPC_GRID_MESSAGE":      8,
		"TRPC_SETNAME_MESSAGE":   16,
	}
)

func (x TrpcMessageType) Enum() *TrpcMessageType {
	p := new(TrpcMessageType)
	*p = x
	return p
}

func (x TrpcMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_v2_trpc_proto_enumTypes[6].Descriptor()
}

func (TrpcMessageType) Type() protoreflect.EnumType {
	return &file_trpc_v2_trpc_proto_enumTypes[6]
}

func (x TrpcMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcMessageType.Descriptor instead.
func (TrpcMessageType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{6}
}

// Encoding type of data content in trpc protocol
// Default uses pb
// Currently agreed that values in the range 0-127 are framework-standard serialization methods, used by framework
type TrpcContentEncodeType int32

const (
	// pb
	TrpcContentEncodeType_TRPC_PROTO_ENCODE TrpcContentEncodeType = 0
	// jce
	TrpcContentEncodeType_TRPC_JCE_ENCODE TrpcContentEncodeType = 1
	// json
	TrpcContentEncodeType_TRPC_JSON_ENCODE TrpcContentEncodeType = 2
	// flatbuffer
	TrpcContentEncodeType_TRPC_FLATBUFFER_ENCODE TrpcContentEncodeType = 3
	// No serialization
	TrpcContentEncodeType_TRPC_NOOP_ENCODE TrpcContentEncodeType = 4
	// xml
	TrpcContentEncodeType_TRPC_XML_ENCODE TrpcContentEncodeType = 5
	// thrift
	TrpcContentEncodeType_TRPC_THRIFT_ENCODE TrpcContentEncodeType = 6
)

// Enum value maps for TrpcContentEncodeType.
var (
	TrpcContentEncodeType_name = map[int32]string{
		0: "TRPC_PROTO_ENCODE",
		1: "TRPC_JCE_ENCODE",
		2: "TRPC_JSON_ENCODE",
		3: "TRPC_FLATBUFFER_ENCODE",
		4: "TRPC_NOOP_ENCODE",
		5: "TRPC_XML_ENCODE",
		6: "TRPC_THRIFT_ENCODE",
	}
	TrpcContentEncodeType_value = map[string]int32{
		"TRPC_PROTO_ENCODE":      0,
		"TRPC_JCE_ENCODE":        1,
		"TRPC_JSON_ENCODE":       2,
		"TRPC_FLATBUFFER_ENCODE": 3,
		"TRPC_NOOP_ENCODE":       4,
		"TRPC_XML_ENCODE":        5,
		"TRPC_THRIFT_ENCODE":     6,
	}
)

func (x TrpcContentEncodeType) Enum() *TrpcContentEncodeType {
	p := new(TrpcContentEncodeType)
	*p = x
	return p
}

func (x TrpcContentEncodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcContentEncodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_v2_trpc_proto_enumTypes[7].Descriptor()
}

func (TrpcContentEncodeType) Type() protoreflect.EnumType {
	return &file_trpc_v2_trpc_proto_enumTypes[7]
}

func (x TrpcContentEncodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcContentEncodeType.Descriptor instead.
func (TrpcContentEncodeType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{7}
}

// Compression type of data content in trpc protocol
// Default uses no compression
type TrpcCompressType int32

const (
	// Default no compression
	TrpcCompressType_TRPC_DEFAULT_COMPRESS TrpcCompressType = 0
	// Use gzip
	TrpcCompressType_TRPC_GZIP_COMPRESS TrpcCompressType = 1
	// Use snappy
	//
	// Deprecated: It is recommended to use TRPC_SNAPPY_STREAM_COMPRESS/TRPC_SNAPPY_BLOCK_COMPRESS, because currently
	// trpc-go and trpc-cpp use stream and block modes respectively, which are incompatible, cross-language calls will cause errors
	TrpcCompressType_TRPC_SNAPPY_COMPRESS TrpcCompressType = 2
	// Use zlib
	TrpcCompressType_TRPC_ZLIB_COMPRESS TrpcCompressType = 3
	// Use snappy in stream mode
	TrpcCompressType_TRPC_SNAPPY_STREAM_COMPRESS TrpcCompressType = 4
	// Use snappy in block mode
	TrpcCompressType_TRPC_SNAPPY_BLOCK_COMPRESS TrpcCompressType = 5
)

// Enum value maps for TrpcCompressType.
var (
	TrpcCompressType_name = map[int32]string{
		0: "TRPC_DEFAULT_COMPRESS",
		1: "TRPC_GZIP_COMPRESS",
		2: "TRPC_SNAPPY_COMPRESS",
		3: "TRPC_ZLIB_COMPRESS",
		4: "TRPC_SNAPPY_STREAM_COMPRESS",
		5: "TRPC_SNAPPY_BLOCK_COMPRESS",
	}
	TrpcCompressType_value = map[string]int32{
		"TRPC_DEFAULT_COMPRESS":       0,
		"TRPC_GZIP_COMPRESS":          1,
		"TRPC_SNAPPY_COMPRESS":        2,
		"TRPC_ZLIB_COMPRESS":          3,
		"TRPC_SNAPPY_STREAM_COMPRESS": 4,
		"TRPC_SNAPPY_BLOCK_COMPRESS":  5,
	}
)

func (x TrpcCompressType) Enum() *TrpcCompressType {
	p := new(TrpcCompressType)
	*p = x
	return p
}

func (x TrpcCompressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcCompressType) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_v2_trpc_proto_enumTypes[8].Descriptor()
}

func (TrpcCompressType) Type() protoreflect.EnumType {
	return &file_trpc_v2_trpc_proto_enumTypes[8]
}

func (x TrpcCompressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcCompressType.Descriptor instead.
func (TrpcCompressType) EnumDescriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{8}
}

// Definition of framework layer interface call return codes
type TrpcRetCode int32

const (
	// Call success
	TrpcRetCode_TRPC_INVOKE_SUCCESS TrpcRetCode = 0
	// Protocol error codes
	// Server-side decode error
	TrpcRetCode_TRPC_SERVER_DECODE_ERR TrpcRetCode = 1
	// Server-side encode error
	TrpcRetCode_TRPC_SERVER_ENCODE_ERR TrpcRetCode = 2
	// Service or func routing error codes
	// Server does not have corresponding service implementation
	TrpcRetCode_TRPC_SERVER_NOSERVICE_ERR TrpcRetCode = 11
	// Server does not have corresponding interface implementation
	TrpcRetCode_TRPC_SERVER_NOFUNC_ERR TrpcRetCode = 12
	// Timeout/overload/limiter error codes
	// Request timed out on server
	TrpcRetCode_TRPC_SERVER_TIMEOUT_ERR TrpcRetCode = 21
	// Request discarded due to server overload protection
	// Mainly used in framework's internal overload protection plugin
	TrpcRetCode_TRPC_SERVER_OVERLOAD_ERR TrpcRetCode = 22
	// Request limited on server
	// Mainly used in external service governance system plugins or business custom limiter plugins, eg: Polaris limiter
	TrpcRetCode_TRPC_SERVER_LIMITED_ERR TrpcRetCode = 23
	// Request timed out on server due to full link timeout
	TrpcRetCode_TRPC_SERVER_FULL_LINK_TIMEOUT_ERR TrpcRetCode = 24
	// Server system error
	TrpcRetCode_TRPC_SERVER_SYSTEM_ERR TrpcRetCode = 31
	// Server authentication failure error
	TrpcRetCode_TRPC_SERVER_AUTH_ERR TrpcRetCode = 41
	// Server request parameter automatic validation failure error
	TrpcRetCode_TRPC_SERVER_VALIDATE_ERR TrpcRetCode = 51
	// Timeout error codes
	// Request timed out on client
	TrpcRetCode_TRPC_CLIENT_INVOKE_TIMEOUT_ERR TrpcRetCode = 101
	// Request timed out on client due to full link timeout
	TrpcRetCode_TRPC_CLIENT_FULL_LINK_TIMEOUT_ERR TrpcRetCode = 102
	// Network related error codes
	// Client connection error
	TrpcRetCode_TRPC_CLIENT_CONNECT_ERR TrpcRetCode = 111
	// Protocol related error codes
	// Client encode error
	TrpcRetCode_TRPC_CLIENT_ENCODE_ERR TrpcRetCode = 121
	// Client decode error
	TrpcRetCode_TRPC_CLIENT_DECODE_ERR TrpcRetCode = 122
	// Overload protection/limiter related error codes
	// Request limited on client
	// Mainly used in external service governance system plugins or business custom limiter plugins, eg: Polaris limiter
	TrpcRetCode_TRPC_CLIENT_LIMITED_ERR TrpcRetCode = 123
	// Request discarded due to client overload protection
	// Mainly used in framework's internal overload protection plugin
	TrpcRetCode_TRPC_CLIENT_OVERLOAD_ERR TrpcRetCode = 124
	// Routing related error codes
	// Client IP routing error
	TrpcRetCode_TRPC_CLIENT_ROUTER_ERR TrpcRetCode = 131
	// Client network error
	TrpcRetCode_TRPC_CLIENT_NETWORK_ERR TrpcRetCode = 141
	// Client response parameter automatic validation failure error
	TrpcRetCode_TRPC_CLIENT_VALIDATE_ERR TrpcRetCode = 151
	// Upstream actively disconnected, early cancellation request error
	TrpcRetCode_TRPC_CLIENT_CANCELED_ERR TrpcRetCode = 161
	// Server-side streaming network error, detailed error codes need to be sorted out during implementation
	TrpcRetCode_TRPC_STREAM_SERVER_NETWORK_ERR TrpcRetCode = 201
	// Server-side streaming transmission error, detailed error codes need to be sorted out during implementation
	// eg: Stream message too large, etc.
	TrpcRetCode_TRPC_STREAM_SERVER_MSG_EXCEED_LIMIT_ERR TrpcRetCode = 211
	// Server-side streaming encode error
	TrpcRetCode_TRPC_STREAM_SERVER_ENCODE_ERR TrpcRetCode = 221
	// Client-side streaming encode/decode error
	TrpcRetCode_TRPC_STREAM_SERVER_DECODE_ERR TrpcRetCode = 222
	// Server-side streaming write error, detailed error codes need to be sorted out during implementation
	TrpcRetCode_TRPC_STREAM_SERVER_WRITE_END          TrpcRetCode = 231
	TrpcRetCode_TRPC_STREAM_SERVER_WRITE_OVERFLOW_ERR TrpcRetCode = 232
	TrpcRetCode_TRPC_STREAM_SERVER_WRITE_CLOSE_ERR    TrpcRetCode = 233
	TrpcRetCode_TRPC_STREAM_SERVER_WRITE_TIMEOUT_ERR  TrpcRetCode = 234
	// Server-side streaming read error, detailed error codes need to be sorted out during implementation
	TrpcRetCode_TRPC_STREAM_SERVER_READ_END         TrpcRetCode = 251
	TrpcRetCode_TRPC_STREAM_SERVER_READ_CLOSE_ERR   TrpcRetCode = 252
	TrpcRetCode_TRPC_STREAM_SERVER_READ_EMPTY_ERR   TrpcRetCode = 253
	TrpcRetCode_TRPC_STREAM_SERVER_READ_TIMEOUT_ERR TrpcRetCode = 254
	// Client-side streaming network error, detailed error codes need to be sorted out during implementation
	TrpcRetCode_TRPC_STREAM_CLIENT_NETWORK_ERR TrpcRetCode = 301
	// Client-side streaming transmission error, detailed error codes need to be sorted out during implementation
	// eg: Stream message too large, etc.
	TrpcRetCode_TRPC_STREAM_CLIENT_MSG_EXCEED_LIMIT_ERR TrpcRetCode = 311
	// Client-side streaming encode error
	TrpcRetCode_TRPC_STREAM_CLIENT_ENCODE_ERR TrpcRetCode = 321
	// Client-side streaming encode/decode error
	TrpcRetCode_TRPC_STREAM_CLIENT_DECODE_ERR TrpcRetCode = 322
	// Client-side streaming write error, detailed error codes need to be sorted out during implementation
	TrpcRetCode_TRPC_STREAM_CLIENT_WRITE_END          TrpcRetCode = 331
	TrpcRetCode_TRPC_STREAM_CLIENT_WRITE_OVERFLOW_ERR TrpcRetCode = 332
	TrpcRetCode_TRPC_STREAM_CLIENT_WRITE_CLOSE_ERR    TrpcRetCode = 333
	TrpcRetCode_TRPC_STREAM_CLIENT_WRITE_TIMEOUT_ERR  TrpcRetCode = 334
	// Client-side streaming read error, detailed error codes need to be sorted out during implementation
	TrpcRetCode_TRPC_STREAM_CLIENT_READ_END         TrpcRetCode = 351
	TrpcRetCode_TRPC_STREAM_CLIENT_READ_CLOSE_ERR   TrpcRetCode = 352
	TrpcRetCode_TRPC_STREAM_CLIENT_READ_EMPTY_ERR   TrpcRetCode = 353
	TrpcRetCode_TRPC_STREAM_CLIENT_READ_TIMEOUT_ERR TrpcRetCode = 354
	// Unspecified error
	TrpcRetCode_TRPC_INVOKE_UNKNOWN_ERR TrpcRetCode = 999
	// Unspecified error
	TrpcRetCode_TRPC_STREAM_UNKNOWN_ERR TrpcRetCode = 1000
)

// Enum value maps for TrpcRetCode.
var (
	TrpcRetCode_name = map[int32]string{
		0:    "TRPC_INVOKE_SUCCESS",
		1:    "TRPC_SERVER_DECODE_ERR",
		2:    "TRPC_SERVER_ENCODE_ERR",
		11:   "TRPC_SERVER_NOSERVICE_ERR",
		12:   "TRPC_SERVER_NOFUNC_ERR",
		21:   "TRPC_SERVER_TIMEOUT_ERR",
		22:   "TRPC_SERVER_OVERLOAD_ERR",
		23:   "TRPC_SERVER_LIMITED_ERR",
		24:   "TRPC_SERVER_FULL_LINK_TIMEOUT_ERR",
		31:   "TRPC_SERVER_SYSTEM_ERR",
		41:   "TRPC_SERVER_AUTH_ERR",
		51:   "TRPC_SERVER_VALIDATE_ERR",
		101:  "TRPC_CLIENT_INVOKE_TIMEOUT_ERR",
		102:  "TRPC_CLIENT_FULL_LINK_TIMEOUT_ERR",
		111:  "TRPC_CLIENT_CONNECT_ERR",
		121:  "TRPC_CLIENT_ENCODE_ERR",
		122:  "TRPC_CLIENT_DECODE_ERR",
		123:  "TRPC_CLIENT_LIMITED_ERR",
		124:  "TRPC_CLIENT_OVERLOAD_ERR",
		131:  "TRPC_CLIENT_ROUTER_ERR",
		141:  "TRPC_CLIENT_NETWORK_ERR",
		151:  "TRPC_CLIENT_VALIDATE_ERR",
		161:  "TRPC_CLIENT_CANCELED_ERR",
		201:  "TRPC_STREAM_SERVER_NETWORK_ERR",
		211:  "TRPC_STREAM_SERVER_MSG_EXCEED_LIMIT_ERR",
		221:  "TRPC_STREAM_SERVER_ENCODE_ERR",
		222:  "TRPC_STREAM_SERVER_DECODE_ERR",
		231:  "TRPC_STREAM_SERVER_WRITE_END",
		232:  "TRPC_STREAM_SERVER_WRITE_OVERFLOW_ERR",
		233:  "TRPC_STREAM_SERVER_WRITE_CLOSE_ERR",
		234:  "TRPC_STREAM_SERVER_WRITE_TIMEOUT_ERR",
		251:  "TRPC_STREAM_SERVER_READ_END",
		252:  "TRPC_STREAM_SERVER_READ_CLOSE_ERR",
		253:  "TRPC_STREAM_SERVER_READ_EMPTY_ERR",
		254:  "TRPC_STREAM_SERVER_READ_TIMEOUT_ERR",
		301:  "TRPC_STREAM_CLIENT_NETWORK_ERR",
		311:  "TRPC_STREAM_CLIENT_MSG_EXCEED_LIMIT_ERR",
		321:  "TRPC_STREAM_CLIENT_ENCODE_ERR",
		322:  "TRPC_STREAM_CLIENT_DECODE_ERR",
		331:  "TRPC_STREAM_CLIENT_WRITE_END",
		332:  "TRPC_STREAM_CLIENT_WRITE_OVERFLOW_ERR",
		333:  "TRPC_STREAM_CLIENT_WRITE_CLOSE_ERR",
		334:  "TRPC_STREAM_CLIENT_WRITE_TIMEOUT_ERR",
		351:  "TRPC_STREAM_CLIENT_READ_END",
		352:  "TRPC_STREAM_CLIENT_READ_CLOSE_ERR",
		353:  "TRPC_STREAM_CLIENT_READ_EMPTY_ERR",
		354:  "TRPC_STREAM_CLIENT_READ_TIMEOUT_ERR",
		999:  "TRPC_INVOKE_UNKNOWN_ERR",
		1000: "TRPC_STREAM_UNKNOWN_ERR",
	}
	TrpcRetCode_value = map[string]int32{
		"TRPC_INVOKE_SUCCESS":                     0,
		"TRPC_SERVER_DECODE_ERR":                  1,
		"TRPC_SERVER_ENCODE_ERR":                  2,
		"TRPC_SERVER_NOSERVICE_ERR":               11,
		"TRPC_SERVER_NOFUNC_ERR":                  12,
		"TRPC_SERVER_TIMEOUT_ERR":                 21,
		"TRPC_SERVER_OVERLOAD_ERR":                22,
		"TRPC_SERVER_LIMITED_ERR":                 23,
		"TRPC_SERVER_FULL_LINK_TIMEOUT_ERR":       24,
		"TRPC_SERVER_SYSTEM_ERR":                  31,
		"TRPC_SERVER_AUTH_ERR":                    41,
		"TRPC_SERVER_VALIDATE_ERR":                51,
		"TRPC_CLIENT_INVOKE_TIMEOUT_ERR":          101,
		"TRPC_CLIENT_FULL_LINK_TIMEOUT_ERR":       102,
		"TRPC_CLIENT_CONNECT_ERR":                 111,
		"TRPC_CLIENT_ENCODE_ERR":                  121,
		"TRPC_CLIENT_DECODE_ERR":                  122,
		"TRPC_CLIENT_LIMITED_ERR":                 123,
		"TRPC_CLIENT_OVERLOAD_ERR":                124,
		"TRPC_CLIENT_ROUTER_ERR":                  131,
		"TRPC_CLIENT_NETWORK_ERR":                 141,
		"TRPC_CLIENT_VALIDATE_ERR":                151,
		"TRPC_CLIENT_CANCELED_ERR":                161,
		"TRPC_STREAM_SERVER_NETWORK_ERR":          201,
		"TRPC_STREAM_SERVER_MSG_EXCEED_LIMIT_ERR": 211,
		"TRPC_STREAM_SERVER_ENCODE_ERR":           221,
		"TRPC_STREAM_SERVER_DECODE_ERR":           222,
		"TRPC_STREAM_SERVER_WRITE_END":            231,
		"TRPC_STREAM_SERVER_WRITE_OVERFLOW_ERR":   232,
		"TRPC_STREAM_SERVER_WRITE_CLOSE_ERR":      233,
		"TRPC_STREAM_SERVER_WRITE_TIMEOUT_ERR":    234,
		"TRPC_STREAM_SERVER_READ_END":             251,
		"TRPC_STREAM_SERVER_READ_CLOSE_ERR":       252,
		"TRPC_STREAM_SERVER_READ_EMPTY_ERR":       253,
		"TRPC_STREAM_SERVER_READ_TIMEOUT_ERR":     254,
		"TRPC_STREAM_CLIENT_NETWORK_ERR":          301,
		"TRPC_STREAM_CLIENT_MSG_EXCEED_LIMIT_ERR": 311,
		"TRPC_STREAM_CLIENT_ENCODE_ERR":           321,
		"TRPC_STREAM_CLIENT_DECODE_ERR":           322,
		"TRPC_STREAM_CLIENT_WRITE_END":            331,
		"TRPC_STREAM_CLIENT_WRITE_OVERFLOW_ERR":   332,
		"TRPC_STREAM_CLIENT_WRITE_CLOSE_ERR":      333,
		"TRPC_STREAM_CLIENT_WRITE_TIMEOUT_ERR":    334,
		"TRPC_STREAM_CLIENT_READ_END":             351,
		"TRPC_STREAM_CLIENT_READ_CLOSE_ERR":       352,
		"TRPC_STREAM_CLIENT_READ_EMPTY_ERR":       353,
		"TRPC_STREAM_CLIENT_READ_TIMEOUT_ERR":     354,
		"TRPC_INVOKE_UNKNOWN_ERR":                 999,
		"TRPC_STREAM_UNKNOWN_ERR":                 1000,
	}
)

func (x TrpcRetCode) Enum() *TrpcRetCode {
	p := new(TrpcRetCode)
	*p = x
	return p
}

func (x TrpcRetCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrpcRetCode) Descriptor() protoreflect.EnumDescriptor {
	return file_trpc_v2_trpc_proto_enumTypes[9].Descriptor()
}

func (TrpcRetCode) Type() protoreflect.EnumType {
	return &file_trpc_v2_trpc_proto_enumTypes[9]
}

func (x TrpcRetCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrpcRetCode.Descriptor instead.
func (TrpcRetCode) EnumDescriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{9}
}

// Definition of flow control frame header message for trpc streaming
type TrpcStreamInitMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// INIT request metadata
	RequestMeta *TrpcStreamInitRequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3" json:"request_meta,omitempty"`
	// INIT response metadata
	ResponseMeta *TrpcStreamInitResponseMeta `protobuf:"bytes,2,opt,name=response_meta,json=responseMeta,proto3" json:"response_meta,omitempty"`
	// Initial send window size notified by receiver to sender
	InitWindowSize uint32 `protobuf:"varint,3,opt,name=init_window_size,json=initWindowSize,proto3" json:"init_window_size,omitempty"`
	// Serialization type of request data
	// eg: proto/jce/json, default proto
	// Specific value corresponds to TrpcContentEncodeType
	ContentType uint32 `protobuf:"varint,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Compression method used for request data
	// eg: gzip/snappy/..., default not used
	// Specific value corresponds to TrpcCompressType
	ContentEncoding uint32 `protobuf:"varint,5,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
}

func (x *TrpcStreamInitMeta) Reset() {
	*x = TrpcStreamInitMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trpc_v2_trpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrpcStreamInitMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrpcStreamInitMeta) ProtoMessage() {}

func (x *TrpcStreamInitMeta) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_v2_trpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrpcStreamInitMeta.ProtoReflect.Descriptor instead.
func (*TrpcStreamInitMeta) Descriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{0}
}

func (x *TrpcStreamInitMeta) GetRequestMeta() *TrpcStreamInitRequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *TrpcStreamInitMeta) GetResponseMeta() *TrpcStreamInitResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *TrpcStreamInitMeta) GetInitWindowSize() uint32 {
	if x != nil {
		return x.InitWindowSize
	}
	return 0
}

func (x *TrpcStreamInitMeta) GetContentType() uint32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *TrpcStreamInitMeta) GetContentEncoding() uint32 {
	if x != nil {
		return x.ContentEncoding
	}
	return 0
}

// Request metadata definition for trpc streaming INIT header
type TrpcStreamInitRequestMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the calling service
	// Standard format in trpc protocol: trpc.application_name.server_name.proto_service_name, 4 segments
	Caller []byte `protobuf:"bytes,1,opt,name=caller,proto3" json:"caller,omitempty"`
	// Routing name of the called service
	// Standard format in trpc protocol: trpc.application_name.server_name.proto_service_name[.interface_name]
	// First 4 segments are mandatory, interface is optional
	Callee []byte `protobuf:"bytes,2,opt,name=callee,proto3" json:"callee,omitempty"`
	// Interface name of the called service
	// Standard format: /package.Service_name/interface_name
	Func []byte `protobuf:"bytes,3,opt,name=func,proto3" json:"func,omitempty"`
	// Message type for framework information transparent transmission
	// Such as tracing, dyeing key, gray, authentication, multi-environment, set name, etc.
	// Specific value corresponds to TrpcMessageType
	MessageType uint32 `protobuf:"varint,4,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// Key-value pairs for framework transparent transmission information, currently divided into two parts:
	// 1. Information to be transparently transmitted by the framework layer, key names must start with 'trpc-'
	// 2. Information to be transparently transmitted by the business layer, which can be set by the business itself
	// Note: Key-value pairs in trans_info will be transparently transmitted through the entire link, please use with caution!
	TransInfo map[string][]byte `protobuf:"bytes,5,rep,name=trans_info,json=transInfo,proto3" json:"trans_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TrpcStreamInitRequestMeta) Reset() {
	*x = TrpcStreamInitRequestMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trpc_v2_trpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrpcStreamInitRequestMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrpcStreamInitRequestMeta) ProtoMessage() {}

func (x *TrpcStreamInitRequestMeta) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_v2_trpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrpcStreamInitRequestMeta.ProtoReflect.Descriptor instead.
func (*TrpcStreamInitRequestMeta) Descriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{1}
}

func (x *TrpcStreamInitRequestMeta) GetCaller() []byte {
	if x != nil {
		return x.Caller
	}
	return nil
}

func (x *TrpcStreamInitRequestMeta) GetCallee() []byte {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *TrpcStreamInitRequestMeta) GetFunc() []byte {
	if x != nil {
		return x.Func
	}
	return nil
}

func (x *TrpcStreamInitRequestMeta) GetMessageType() uint32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *TrpcStreamInitRequestMeta) GetTransInfo() map[string][]byte {
	if x != nil {
		return x.TransInfo
	}
	return nil
}

// Response metadata definition for trpc streaming INIT header
type TrpcStreamInitResponseMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error return code at framework layer
	// Specific value corresponds to TrpcRetCode
	Ret int32 `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	// Call result information description
	// Used when failed
	ErrorMsg []byte `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *TrpcStreamInitResponseMeta) Reset() {
	*x = TrpcStreamInitResponseMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trpc_v2_trpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrpcStreamInitResponseMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrpcStreamInitResponseMeta) ProtoMessage() {}

func (x *TrpcStreamInitResponseMeta) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_v2_trpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrpcStreamInitResponseMeta.ProtoReflect.Descriptor instead.
func (*TrpcStreamInitResponseMeta) Descriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{2}
}

func (x *TrpcStreamInitResponseMeta) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *TrpcStreamInitResponseMeta) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

// Definition of flow control frame header metadata for trpc streaming
type TrpcStreamFeedBackMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Incremented window size
	WindowSizeIncrement uint32 `protobuf:"varint,1,opt,name=window_size_increment,json=windowSizeIncrement,proto3" json:"window_size_increment,omitempty"`
}

func (x *TrpcStreamFeedBackMeta) Reset() {
	*x = TrpcStreamFeedBackMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trpc_v2_trpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrpcStreamFeedBackMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrpcStreamFeedBackMeta) ProtoMessage() {}

func (x *TrpcStreamFeedBackMeta) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_v2_trpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrpcStreamFeedBackMeta.ProtoReflect.Descriptor instead.
func (*TrpcStreamFeedBackMeta) Descriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{3}
}

func (x *TrpcStreamFeedBackMeta) GetWindowSizeIncrement() uint32 {
	if x != nil {
		return x.WindowSizeIncrement
	}
	return 0
}

// Definition of RESET frame header message for trpc streaming
type TrpcStreamCloseMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Close type, whether to close one end or all
	CloseType int32 `protobuf:"varint,1,opt,name=close_type,json=closeType,proto3" json:"close_type,omitempty"`
	// Close return code
	// Represents framework layer error
	Ret int32 `protobuf:"varint,2,opt,name=ret,proto3" json:"ret,omitempty"`
	// Close information description
	Msg []byte `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	// Message type for framework information transparent transmission
	// Such as tracing, dyeing key, gray, authentication, multi-environment, set name, etc.
	// Specific value corresponds to TrpcMessageType
	MessageType uint32 `protobuf:"varint,4,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// Key-value pairs for framework transparent transmission information, currently divided into two parts:
	// 1. Information to be transparently transmitted by the framework layer, key names must start with 'trpc-'
	// 2. Information to be transparently transmitted by the business layer, which can be set by the business itself
	TransInfo map[string][]byte `protobuf:"bytes,5,rep,name=trans_info,json=transInfo,proto3" json:"trans_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Interface error return code
	// It is recommended to identify success and failure when using, 0 represents success, others represent failure
	FuncRet int32 `protobuf:"varint,6,opt,name=func_ret,json=funcRet,proto3" json:"func_ret,omitempty"`
}

func (x *TrpcStreamCloseMeta) Reset() {
	*x = TrpcStreamCloseMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trpc_v2_trpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrpcStreamCloseMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrpcStreamCloseMeta) ProtoMessage() {}

func (x *TrpcStreamCloseMeta) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_v2_trpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrpcStreamCloseMeta.ProtoReflect.Descriptor instead.
func (*TrpcStreamCloseMeta) Descriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{4}
}

func (x *TrpcStreamCloseMeta) GetCloseType() int32 {
	if x != nil {
		return x.CloseType
	}
	return 0
}

func (x *TrpcStreamCloseMeta) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *TrpcStreamCloseMeta) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *TrpcStreamCloseMeta) GetMessageType() uint32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *TrpcStreamCloseMeta) GetTransInfo() map[string][]byte {
	if x != nil {
		return x.TransInfo
	}
	return nil
}

func (x *TrpcStreamCloseMeta) GetFuncRet() int32 {
	if x != nil {
		return x.FuncRet
	}
	return 0
}

// Request protocol header
type RequestProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol version
	// Specific value corresponds to TrpcProtoVersion
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Call type of request
	// eg: normal call, one-way call
	// Specific value corresponds to TrpcCallType
	CallType uint32 `protobuf:"varint,2,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	// Request unique id
	RequestId uint32 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Request timeout, unit ms
	Timeout uint32 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Name of the calling service
	// Standard format in trpc protocol: trpc.application_name.server_name.proto_service_name, 4 segments
	Caller []byte `protobuf:"bytes,5,opt,name=caller,proto3" json:"caller,omitempty"`
	// Routing name of the called service
	// Standard format in trpc protocol: trpc.application_name.server_name.proto_service_name[.interface_name]
	// First 4 segments are mandatory, interface is optional
	Callee []byte `protobuf:"bytes,6,opt,name=callee,proto3" json:"callee,omitempty"`
	// Interface name of the called service
	// Standard format: /package.Service_name/interface_name
	Func []byte `protobuf:"bytes,7,opt,name=func,proto3" json:"func,omitempty"`
	// Message type for framework information transparent transmission
	// Such as tracing, dyeing key, gray, authentication, multi-environment, set name, etc.
	// Specific value corresponds to TrpcMessageType
	MessageType uint32 `protobuf:"varint,8,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// Key-value pairs for framework transparent transmission information, currently divided into two parts:
	// 1. Information to be transparently transmitted by the framework layer, key names must start with 'trpc-'
	// 2. Information to be transparently transmitted by the business layer, which can be set by the business itself
	TransInfo map[string][]byte `protobuf:"bytes,9,rep,name=trans_info,json=transInfo,proto3" json:"trans_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Serialization type of request data
	// eg: proto/jce/json, default proto
	// Specific value corresponds to TrpcContentEncodeType
	ContentType uint32 `protobuf:"varint,10,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Compression method used for request data
	// eg: gzip/snappy/..., default not used
	// Specific value corresponds to TrpcCompressType
	ContentEncoding uint32 `protobuf:"varint,11,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
}

func (x *RequestProtocol) Reset() {
	*x = RequestProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trpc_v2_trpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestProtocol) ProtoMessage() {}

func (x *RequestProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_v2_trpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestProtocol.ProtoReflect.Descriptor instead.
func (*RequestProtocol) Descriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{5}
}

func (x *RequestProtocol) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RequestProtocol) GetCallType() uint32 {
	if x != nil {
		return x.CallType
	}
	return 0
}

func (x *RequestProtocol) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *RequestProtocol) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *RequestProtocol) GetCaller() []byte {
	if x != nil {
		return x.Caller
	}
	return nil
}

func (x *RequestProtocol) GetCallee() []byte {
	if x != nil {
		return x.Callee
	}
	return nil
}

func (x *RequestProtocol) GetFunc() []byte {
	if x != nil {
		return x.Func
	}
	return nil
}

func (x *RequestProtocol) GetMessageType() uint32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *RequestProtocol) GetTransInfo() map[string][]byte {
	if x != nil {
		return x.TransInfo
	}
	return nil
}

func (x *RequestProtocol) GetContentType() uint32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *RequestProtocol) GetContentEncoding() uint32 {
	if x != nil {
		return x.ContentEncoding
	}
	return 0
}

// Response protocol header
type ResponseProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol version
	// Specific value corresponds to TrpcProtoVersion
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Call type of request
	// eg: normal call, one-way call
	// Specific value corresponds to TrpcCallType
	CallType uint32 `protobuf:"varint,2,opt,name=call_type,json=callType,proto3" json:"call_type,omitempty"`
	// Request unique id
	RequestId uint32 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Error return code at framework layer
	// Specific value corresponds to TrpcRetCode
	Ret int32 `protobuf:"varint,4,opt,name=ret,proto3" json:"ret,omitempty"`
	// Interface error return code
	// It is recommended to identify success and failure when using, 0 represents success, others represent failure
	FuncRet int32 `protobuf:"varint,5,opt,name=func_ret,json=funcRet,proto3" json:"func_ret,omitempty"`
	// Call result information description
	// Used when failed
	ErrorMsg []byte `protobuf:"bytes,6,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	// Message type for framework information transparent transmission
	// Such as tracing, dyeing key, gray, authentication, multi-environment, set name, etc.
	// Specific value corresponds to TrpcMessageType
	MessageType uint32 `protobuf:"varint,7,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// Key-value pairs for framework transparent transmission information returned,
	// Currently divided into two parts:
	// 1. Information transparently transmitted back by the framework layer, key names must start with 'trpc-'
	// 2. Information transparently transmitted back by the business layer, which can be set by the business itself
	TransInfo map[string][]byte `protobuf:"bytes,8,rep,name=trans_info,json=transInfo,proto3" json:"trans_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Encoding type of response data
	// eg: proto/jce/json, default proto
	// Specific value corresponds to TrpcContentEncodeType
	ContentType uint32 `protobuf:"varint,9,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Compression method used for response data
	// eg: gzip/snappy/..., default not used
	// Specific value corresponds to TrpcCompressType
	ContentEncoding uint32 `protobuf:"varint,10,opt,name=content_encoding,json=contentEncoding,proto3" json:"content_encoding,omitempty"`
}

func (x *ResponseProtocol) Reset() {
	*x = ResponseProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trpc_v2_trpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseProtocol) ProtoMessage() {}

func (x *ResponseProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_v2_trpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseProtocol.ProtoReflect.Descriptor instead.
func (*ResponseProtocol) Descriptor() ([]byte, []int) {
	return file_trpc_v2_trpc_proto_rawDescGZIP(), []int{6}
}

func (x *ResponseProtocol) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ResponseProtocol) GetCallType() uint32 {
	if x != nil {
		return x.CallType
	}
	return 0
}

func (x *ResponseProtocol) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *ResponseProtocol) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

func (x *ResponseProtocol) GetFuncRet() int32 {
	if x != nil {
		return x.FuncRet
	}
	return 0
}

func (x *ResponseProtocol) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *ResponseProtocol) GetMessageType() uint32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *ResponseProtocol) GetTransInfo() map[string][]byte {
	if x != nil {
		return x.TransInfo
	}
	return nil
}

func (x *ResponseProtocol) GetContentType() uint32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *ResponseProtocol) GetContentEncoding() uint32 {
	if x != nil {
		return x.ContentEncoding
	}
	return 0
}

var File_trpc_v2_trpc_proto protoreflect.FileDescriptor

var file_trpc_v2_trpc_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x22, 0x9d, 0x02,
	0x0a, 0x12, 0x54, 0x72, 0x70, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x69, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x70, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x70,
	0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x69, 0x6e, 0x69, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x92, 0x02,
	0x0a, 0x19, 0x54, 0x72, 0x70, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x75, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x72, 0x70, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3c, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x4b, 0x0a, 0x1a, 0x54, 0x72, 0x70, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22,
	0x4c, 0x0a, 0x16, 0x54, 0x72, 0x70, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x65, 0x65,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa0, 0x02,
	0x0a, 0x13, 0x54, 0x72, 0x70, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x70, 0x63, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x5f,
	0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x63, 0x52,
	0x65, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xbc, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x1a, 0x3c, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xaa, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x66, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x3c,
	0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x39, 0x0a, 0x09,
	0x54, 0x72, 0x70, 0x63, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x50,
	0x43, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x10, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0xb0, 0x12, 0x2a, 0x40, 0x0a, 0x11, 0x54, 0x72, 0x70, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x52, 0x50, 0x43, 0x5f, 0x55, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x2a, 0x9a, 0x01, 0x0a, 0x13, 0x54, 0x72,
	0x70, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x55, 0x4e, 0x41, 0x52, 0x59, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x50,
	0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x46,
	0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x50,
	0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x10, 0x04, 0x2a, 0x43, 0x0a, 0x13, 0x54, 0x72, 0x70, 0x63, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x01, 0x2a, 0x25, 0x0a, 0x10, 0x54,
	0x72, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x56, 0x31,
	0x10, 0x00, 0x2a, 0x39, 0x0a, 0x0c, 0x54, 0x72, 0x70, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x55, 0x4e, 0x41, 0x52, 0x59,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x50, 0x43, 0x5f,
	0x4f, 0x4e, 0x45, 0x57, 0x41, 0x59, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x2a, 0xa1, 0x01,
	0x0a, 0x0f, 0x54, 0x72, 0x70, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x44, 0x59, 0x45, 0x49,
	0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x52, 0x50, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x5f, 0x45, 0x4e, 0x56, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x50, 0x43, 0x5f,
	0x53, 0x45, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x10, 0x2a, 0xb8, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x52, 0x50, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x4a, 0x43, 0x45, 0x5f, 0x45,
	0x4e, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x50, 0x43, 0x5f,
	0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52,
	0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x50,
	0x43, 0x5f, 0x4e, 0x4f, 0x4f, 0x50, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x58, 0x4d, 0x4c, 0x5f, 0x45, 0x4e, 0x43, 0x4f,
	0x44, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x54, 0x48, 0x52,
	0x49, 0x46, 0x54, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x06, 0x2a, 0xb8, 0x01, 0x0a,
	0x10, 0x54, 0x72, 0x70, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x52, 0x50, 0x43, 0x5f, 0x47, 0x5a, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x50, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x5a, 0x4c, 0x49, 0x42, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53,
	0x4e, 0x41, 0x50, 0x50, 0x59, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x50, 0x43, 0x5f,
	0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05, 0x2a, 0xb0, 0x0d, 0x0a, 0x0b, 0x54, 0x72, 0x70, 0x63,
	0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x50, 0x43, 0x5f,
	0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x50, 0x43,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x50, 0x43, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x15,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x16, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x17, 0x12, 0x25, 0x0a, 0x21, 0x54,
	0x52, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0x18, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x1f, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x29, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x50, 0x43,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0x33, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x52,
	0x50, 0x43, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0x66, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x6f, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52,
	0x50, 0x43, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0x7a, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0x7b, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0x7c, 0x12, 0x1b, 0x0a, 0x16, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x83, 0x01, 0x12, 0x1c,
	0x0a, 0x17, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x8d, 0x01, 0x12, 0x1d, 0x0a, 0x18,
	0x54, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x97, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x54,
	0x52, 0x50, 0x43, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xa1, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x54, 0x52,
	0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xc9, 0x01, 0x12,
	0x2c, 0x0a, 0x27, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xd3, 0x01, 0x12, 0x22, 0x0a,
	0x1d, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xdd,
	0x01, 0x12, 0x22, 0x0a, 0x1d, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0xde, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xe7, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x54, 0x52, 0x50, 0x43,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0xe8, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xe9, 0x01, 0x12, 0x29, 0x0a,
	0x24, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xea, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x54, 0x52, 0x50, 0x43,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xfb, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x54, 0x52,
	0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0xfc, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x45, 0x4d,
	0x50, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xfd, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x54, 0x52,
	0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0xfe, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xad, 0x02, 0x12, 0x2c, 0x0a, 0x27, 0x54, 0x52, 0x50,
	0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x53, 0x47, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0xb7, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x54, 0x52, 0x50, 0x43, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xc1, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x54,
	0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xc2, 0x02, 0x12,
	0x21, 0x0a, 0x1c, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0xcb, 0x02, 0x12, 0x2a, 0x0a, 0x25, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xcc, 0x02, 0x12, 0x27,
	0x0a, 0x22, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0xcd, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x54, 0x52, 0x50, 0x43, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10,
	0xce, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x45, 0x4e,
	0x44, 0x10, 0xdf, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xe0, 0x02, 0x12, 0x26, 0x0a, 0x21,
	0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0xe1, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xe2, 0x02, 0x12, 0x1c,
	0x0a, 0x17, 0x54, 0x52, 0x50, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xe7, 0x07, 0x12, 0x1c, 0x0a, 0x17,
	0x54, 0x52, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xe8, 0x07, 0x42, 0x68, 0x0a, 0x26, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x0c, 0x54, 0x52, 0x50, 0x43, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5a, 0x30, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x74,
	0x72, 0x70, 0x63, 0x2f, 0x74, 0x72, 0x70, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x32, 0x3b,
	0x74, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trpc_v2_trpc_proto_rawDescOnce sync.Once
	file_trpc_v2_trpc_proto_rawDescData = file_trpc_v2_trpc_proto_rawDesc
)

func file_trpc_v2_trpc_proto_rawDescGZIP() []byte {
	file_trpc_v2_trpc_proto_rawDescOnce.Do(func() {
		file_trpc_v2_trpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_trpc_v2_trpc_proto_rawDescData)
	})
	return file_trpc_v2_trpc_proto_rawDescData
}

var file_trpc_v2_trpc_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_trpc_v2_trpc_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_trpc_v2_trpc_proto_goTypes = []interface{}{
	(TrpcMagic)(0),                     // 0: trpc.v2.TrpcMagic
	(TrpcDataFrameType)(0),             // 1: trpc.v2.TrpcDataFrameType
	(TrpcStreamFrameType)(0),           // 2: trpc.v2.TrpcStreamFrameType
	(TrpcStreamCloseType)(0),           // 3: trpc.v2.TrpcStreamCloseType
	(TrpcProtoVersion)(0),              // 4: trpc.v2.TrpcProtoVersion
	(TrpcCallType)(0),                  // 5: trpc.v2.TrpcCallType
	(TrpcMessageType)(0),               // 6: trpc.v2.TrpcMessageType
	(TrpcContentEncodeType)(0),         // 7: trpc.v2.TrpcContentEncodeType
	(TrpcCompressType)(0),              // 8: trpc.v2.TrpcCompressType
	(TrpcRetCode)(0),                   // 9: trpc.v2.TrpcRetCode
	(*TrpcStreamInitMeta)(nil),         // 10: trpc.v2.TrpcStreamInitMeta
	(*TrpcStreamInitRequestMeta)(nil),  // 11: trpc.v2.TrpcStreamInitRequestMeta
	(*TrpcStreamInitResponseMeta)(nil), // 12: trpc.v2.TrpcStreamInitResponseMeta
	(*TrpcStreamFeedBackMeta)(nil),     // 13: trpc.v2.TrpcStreamFeedBackMeta
	(*TrpcStreamCloseMeta)(nil),        // 14: trpc.v2.TrpcStreamCloseMeta
	(*RequestProtocol)(nil),            // 15: trpc.v2.RequestProtocol
	(*ResponseProtocol)(nil),           // 16: trpc.v2.ResponseProtocol
	nil,                                // 17: trpc.v2.TrpcStreamInitRequestMeta.TransInfoEntry
	nil,                                // 18: trpc.v2.TrpcStreamCloseMeta.TransInfoEntry
	nil,                                // 19: trpc.v2.RequestProtocol.TransInfoEntry
	nil,                                // 20: trpc.v2.ResponseProtocol.TransInfoEntry
}
var file_trpc_v2_trpc_proto_depIdxs = []int32{
	11, // 0: trpc.v2.TrpcStreamInitMeta.request_meta:type_name -> trpc.v2.TrpcStreamInitRequestMeta
	12, // 1: trpc.v2.TrpcStreamInitMeta.response_meta:type_name -> trpc.v2.TrpcStreamInitResponseMeta
	17, // 2: trpc.v2.TrpcStreamInitRequestMeta.trans_info:type_name -> trpc.v2.TrpcStreamInitRequestMeta.TransInfoEntry
	18, // 3: trpc.v2.TrpcStreamCloseMeta.trans_info:type_name -> trpc.v2.TrpcStreamCloseMeta.TransInfoEntry
	19, // 4: trpc.v2.RequestProtocol.trans_info:type_name -> trpc.v2.RequestProtocol.TransInfoEntry
	20, // 5: trpc.v2.ResponseProtocol.trans_info:type_name -> trpc.v2.ResponseProtocol.TransInfoEntry
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_trpc_v2_trpc_proto_init() }
func file_trpc_v2_trpc_proto_init() {
	if File_trpc_v2_trpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trpc_v2_trpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrpcStreamInitMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trpc_v2_trpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrpcStreamInitRequestMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trpc_v2_trpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrpcStreamInitResponseMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trpc_v2_trpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrpcStreamFeedBackMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trpc_v2_trpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrpcStreamCloseMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trpc_v2_trpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trpc_v2_trpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trpc_v2_trpc_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trpc_v2_trpc_proto_goTypes,
		DependencyIndexes: file_trpc_v2_trpc_proto_depIdxs,
		EnumInfos:         file_trpc_v2_trpc_proto_enumTypes,
		MessageInfos:      file_trpc_v2_trpc_proto_msgTypes,
	}.Build()
	File_trpc_v2_trpc_proto = out.File
	file_trpc_v2_trpc_proto_rawDesc = nil
	file_trpc_v2_trpc_proto_goTypes = nil
	file_trpc_v2_trpc_proto_depIdxs = nil
}
