// Tencent is pleased to support the open source community by making tRPC available.
// Copyright (C) 2023 THL A29 Limited, a Tencent company. All rights reserved.
// If you have downloaded a copy of the tRPC source code from Tencent,
// please note that tRPC source code is licensed under the Apache 2.0 License,
// A copy of the Apache 2.0 License is included in this file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.27.1
// source: trpc/v2/api/http.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HttpRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Selects a method to which this rule applies.
	//
	// Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
	Selector string `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	// Determines the URL pattern is matched by this rules. This pattern can be
	// used with any of the {get|put|post|delete|patch} methods. A custom method
	// can be defined using the 'custom' field.
	//
	// Types that are valid to be assigned to Pattern:
	//
	//	*HttpRule_Get
	//	*HttpRule_Put
	//	*HttpRule_Post
	//	*HttpRule_Delete
	//	*HttpRule_Patch
	//	*HttpRule_Custom
	Pattern isHttpRule_Pattern `protobuf_oneof:"pattern"`
	// The name of the request field whose value is mapped to the HTTP request
	// body, or `*` for mapping all request fields not captured by the path
	// pattern to the HTTP body, or omitted for not having any HTTP request body.
	//
	// NOTE: the referred field must be present at the top-level of the request
	// message type.
	Body string `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
	// Optional. The name of the response field whose value is mapped to the HTTP
	// response body. When omitted, the entire response message will be used
	// as the HTTP response body.
	//
	// NOTE: The referred field must be present at the top-level of the response
	// message type.
	ResponseBody string `protobuf:"bytes,12,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
	// Additional HTTP bindings for the selector. Nested bindings must
	// not contain an `additional_bindings` field themselves (that is,
	// the nesting may only be one level deep).
	AdditionalBindings []*HttpRule `protobuf:"bytes,11,rep,name=additional_bindings,json=additionalBindings,proto3" json:"additional_bindings,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *HttpRule) Reset() {
	*x = HttpRule{}
	mi := &file_trpc_v2_api_http_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRule) ProtoMessage() {}

func (x *HttpRule) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_v2_api_http_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRule.ProtoReflect.Descriptor instead.
func (*HttpRule) Descriptor() ([]byte, []int) {
	return file_trpc_v2_api_http_proto_rawDescGZIP(), []int{0}
}

func (x *HttpRule) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *HttpRule) GetPattern() isHttpRule_Pattern {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *HttpRule) GetGet() string {
	if x != nil {
		if x, ok := x.Pattern.(*HttpRule_Get); ok {
			return x.Get
		}
	}
	return ""
}

func (x *HttpRule) GetPut() string {
	if x != nil {
		if x, ok := x.Pattern.(*HttpRule_Put); ok {
			return x.Put
		}
	}
	return ""
}

func (x *HttpRule) GetPost() string {
	if x != nil {
		if x, ok := x.Pattern.(*HttpRule_Post); ok {
			return x.Post
		}
	}
	return ""
}

func (x *HttpRule) GetDelete() string {
	if x != nil {
		if x, ok := x.Pattern.(*HttpRule_Delete); ok {
			return x.Delete
		}
	}
	return ""
}

func (x *HttpRule) GetPatch() string {
	if x != nil {
		if x, ok := x.Pattern.(*HttpRule_Patch); ok {
			return x.Patch
		}
	}
	return ""
}

func (x *HttpRule) GetCustom() *CustomHttpPattern {
	if x != nil {
		if x, ok := x.Pattern.(*HttpRule_Custom); ok {
			return x.Custom
		}
	}
	return nil
}

func (x *HttpRule) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *HttpRule) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *HttpRule) GetAdditionalBindings() []*HttpRule {
	if x != nil {
		return x.AdditionalBindings
	}
	return nil
}

type isHttpRule_Pattern interface {
	isHttpRule_Pattern()
}

type HttpRule_Get struct {
	// Maps to HTTP GET. Used for listing and getting information about
	// resources.
	Get string `protobuf:"bytes,2,opt,name=get,proto3,oneof"`
}

type HttpRule_Put struct {
	// Maps to HTTP PUT. Used for replacing a resource.
	Put string `protobuf:"bytes,3,opt,name=put,proto3,oneof"`
}

type HttpRule_Post struct {
	// Maps to HTTP POST. Used for creating a resource or performing an action.
	Post string `protobuf:"bytes,4,opt,name=post,proto3,oneof"`
}

type HttpRule_Delete struct {
	// Maps to HTTP DELETE. Used for deleting a resource.
	Delete string `protobuf:"bytes,5,opt,name=delete,proto3,oneof"`
}

type HttpRule_Patch struct {
	// Maps to HTTP PATCH. Used for updating a resource.
	Patch string `protobuf:"bytes,6,opt,name=patch,proto3,oneof"`
}

type HttpRule_Custom struct {
	// The custom pattern is used for specifying an HTTP method that is not
	// included in the `pattern` field, such as HEAD, or "*" to leave the
	// HTTP method unspecified for this rule. The wild-card rule is useful
	// for services that provide content to Web (HTML) clients.
	Custom *CustomHttpPattern `protobuf:"bytes,8,opt,name=custom,proto3,oneof"`
}

func (*HttpRule_Get) isHttpRule_Pattern() {}

func (*HttpRule_Put) isHttpRule_Pattern() {}

func (*HttpRule_Post) isHttpRule_Pattern() {}

func (*HttpRule_Delete) isHttpRule_Pattern() {}

func (*HttpRule_Patch) isHttpRule_Pattern() {}

func (*HttpRule_Custom) isHttpRule_Pattern() {}

// A custom pattern is used for defining custom HTTP verb.
type CustomHttpPattern struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of this custom HTTP verb.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// The path matched by this custom verb.
	Path          string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomHttpPattern) Reset() {
	*x = CustomHttpPattern{}
	mi := &file_trpc_v2_api_http_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomHttpPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomHttpPattern) ProtoMessage() {}

func (x *CustomHttpPattern) ProtoReflect() protoreflect.Message {
	mi := &file_trpc_v2_api_http_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomHttpPattern.ProtoReflect.Descriptor instead.
func (*CustomHttpPattern) Descriptor() ([]byte, []int) {
	return file_trpc_v2_api_http_proto_rawDescGZIP(), []int{1}
}

func (x *CustomHttpPattern) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CustomHttpPattern) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_trpc_v2_api_http_proto protoreflect.FileDescriptor

const file_trpc_v2_api_http_proto_rawDesc = "" +
	"\n" +
	"\x16trpc/v2/api/http.proto\x12\vtrpc.v2.api\"\xdc\x02\n" +
	"\bHttpRule\x12\x1a\n" +
	"\bselector\x18\x01 \x01(\tR\bselector\x12\x12\n" +
	"\x03get\x18\x02 \x01(\tH\x00R\x03get\x12\x12\n" +
	"\x03put\x18\x03 \x01(\tH\x00R\x03put\x12\x14\n" +
	"\x04post\x18\x04 \x01(\tH\x00R\x04post\x12\x18\n" +
	"\x06delete\x18\x05 \x01(\tH\x00R\x06delete\x12\x16\n" +
	"\x05patch\x18\x06 \x01(\tH\x00R\x05patch\x128\n" +
	"\x06custom\x18\b \x01(\v2\x1e.trpc.v2.api.CustomHttpPatternH\x00R\x06custom\x12\x12\n" +
	"\x04body\x18\a \x01(\tR\x04body\x12#\n" +
	"\rresponse_body\x18\f \x01(\tR\fresponseBody\x12F\n" +
	"\x13additional_bindings\x18\v \x03(\v2\x15.trpc.v2.api.HttpRuleR\x12additionalBindingsB\t\n" +
	"\apattern\";\n" +
	"\x11CustomHttpPattern\x12\x12\n" +
	"\x04kind\x18\x01 \x01(\tR\x04kind\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04pathBP\n" +
	"\x1dcom.tencent.trpc.protobuf.extZ/trpc.group/trpc/trpc-protocol/pb/go/trpc/v2/apib\x06proto3"

var (
	file_trpc_v2_api_http_proto_rawDescOnce sync.Once
	file_trpc_v2_api_http_proto_rawDescData []byte
)

func file_trpc_v2_api_http_proto_rawDescGZIP() []byte {
	file_trpc_v2_api_http_proto_rawDescOnce.Do(func() {
		file_trpc_v2_api_http_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_trpc_v2_api_http_proto_rawDesc), len(file_trpc_v2_api_http_proto_rawDesc)))
	})
	return file_trpc_v2_api_http_proto_rawDescData
}

var file_trpc_v2_api_http_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_trpc_v2_api_http_proto_goTypes = []any{
	(*HttpRule)(nil),          // 0: trpc.v2.api.HttpRule
	(*CustomHttpPattern)(nil), // 1: trpc.v2.api.CustomHttpPattern
}
var file_trpc_v2_api_http_proto_depIdxs = []int32{
	1, // 0: trpc.v2.api.HttpRule.custom:type_name -> trpc.v2.api.CustomHttpPattern
	0, // 1: trpc.v2.api.HttpRule.additional_bindings:type_name -> trpc.v2.api.HttpRule
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_trpc_v2_api_http_proto_init() }
func file_trpc_v2_api_http_proto_init() {
	if File_trpc_v2_api_http_proto != nil {
		return
	}
	file_trpc_v2_api_http_proto_msgTypes[0].OneofWrappers = []any{
		(*HttpRule_Get)(nil),
		(*HttpRule_Put)(nil),
		(*HttpRule_Post)(nil),
		(*HttpRule_Delete)(nil),
		(*HttpRule_Patch)(nil),
		(*HttpRule_Custom)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_trpc_v2_api_http_proto_rawDesc), len(file_trpc_v2_api_http_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trpc_v2_api_http_proto_goTypes,
		DependencyIndexes: file_trpc_v2_api_http_proto_depIdxs,
		MessageInfos:      file_trpc_v2_api_http_proto_msgTypes,
	}.Build()
	File_trpc_v2_api_http_proto = out.File
	file_trpc_v2_api_http_proto_goTypes = nil
	file_trpc_v2_api_http_proto_depIdxs = nil
}
